import{_ as s,c as t,o as i,a3 as a}from"./chunks/framework.7ep0oyv4.js";const F=JSON.parse('{"title":"重定向/环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"linux/3.md","filePath":"linux/3.md"}'),h={name:"linux/3.md"},l=a(`<h1 id="重定向-环境变量" tabindex="-1">重定向/环境变量 <a class="header-anchor" href="#重定向-环境变量" aria-label="Permalink to &quot;重定向/环境变量&quot;">​</a></h1><h2 id="输入输出重定向" tabindex="-1">输入输出重定向 <a class="header-anchor" href="#输入输出重定向" aria-label="Permalink to &quot;输入输出重定向&quot;">​</a></h2><p>输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到屏幕的数据信息写入到指定文件中。</p><ul><li><strong>标准输入重定向（STDIN，文件描述符为0）</strong>：默认从键盘输入，也可从其他文件或命令中输入。</li><li><strong>标准输出重定向（STDOUT，文件描述符为1）</strong>：默认输出到屏幕。</li><li><strong>错误输出重定向（STDERR，文件描述符为2）</strong>：默认输出到屏幕。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#将标准输出重定向到一个文件中，覆盖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#将错误输出重定向到一个文件中，覆盖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#将标准输出重定向到一个文件中，追加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#将错误输出重定向到一个文件中，追加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 文件 ——#将标准输出与错误输出共同写入到文件中，追加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	——#将文件作为命令的标准输入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">命令</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分界符</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	——#从标准输入中读入，直到遇见分界符才停止</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">例：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ls -l yage &amp;&gt;&gt; readme.txt #全部追加写入到文件中，不区分错误</span></span></code></pre></div><h2 id="管道符" tabindex="-1">管道符 <a class="header-anchor" href="#管道符" aria-label="Permalink to &quot;管道符&quot;">​</a></h2><p>管道命令符的作用也可以用一句话概括为“把前一个命令原本要输出到屏幕的信息当作后一个命令的标准输入”</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#查看家目录ls有多少个单词</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ——#显示http相关进程</span></span></code></pre></div><h2 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h2><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任意字符</td></tr><tr><td>?</td><td>单个任意字符</td></tr><tr><td>[a-z]</td><td>单个小写字母</td></tr><tr><td>[A-Z]</td><td>单个大写字母</td></tr><tr><td>[a-Z]</td><td>单个字母</td></tr><tr><td>[0-9]</td><td>单个数字</td></tr><tr><td>[[:alpha:]]</td><td>任意字母</td></tr><tr><td>[[:upper:]]</td><td>任意大写字母</td></tr><tr><td>[[:lower:]]</td><td>任意小写字母</td></tr><tr><td>[[:digit:]]</td><td>所有数字</td></tr><tr><td>[[:alnum:]]</td><td>任意字母加数字</td></tr><tr><td>[[:punct:]]</td><td>标点符号</td></tr></tbody></table><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>变量是计算机系统用于保存可变值的数据类型。在Linux系统中，变量名称一般都是大写的，命令则都是小写的，这是一种约定俗成的规范。Linux系统中的环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录、邮件存放位置等。可以直接通过变量名称来提取到对应的变量值。</p><p>用户执行了一条命令之后，命令在Linux中的执行分为4个步骤：</p><ol><li>判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是绝对路径则直接执行。</li><li>Linux系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令名称来替换原本的命令名称。</li><li>Bash解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤4继续处理。可以使用“type 命令名称”来判断用户输入的命令是内部命令还是外部命令</li><li>系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作PATH。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #查看当前所有的全局环境变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] echo $PATH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/root/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/root/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] echo $PATH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/root/bin:/root/bin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nowdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;date &quot;+%Y-%m-%d %H:%M:%S&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] nowdate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2023-12-03</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19:03:31</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@yage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] unalias nowdate</span></span></code></pre></div><table><thead><tr><th>变量名称</th><th>作用</th></tr></thead><tbody><tr><td>HOME</td><td>用户的主目录（即家目录）</td></tr><tr><td>SHELL</td><td>用户在使用的Shell解释器名称</td></tr><tr><td>HISTSIZE</td><td>输出的历史命令记录条数</td></tr><tr><td>HISTFILESIZE</td><td>保存的历史命令记录条数</td></tr><tr><td>MAIL</td><td>邮件保存路径</td></tr><tr><td>LANG</td><td>系统语言、语系名称</td></tr><tr><td>RANDOM</td><td>生成一个随机数字</td></tr><tr><td>PS1</td><td>Bash解释器的提示符</td></tr><tr><td>PATH</td><td>定义解释器搜索用户执行命令的路径</td></tr><tr><td>EDITOR</td><td>用户默认的文本编辑器</td></tr></tbody></table><blockquote><p>直接在终端设置的变量能够立即生效，但在重启服务器后就会失效，因此我们需要将变量和变量值写入到.bashrc或者.bash_profile文件中，以确保永久能使用它们。</p></blockquote><p><code>.bashrc</code>是home目录下的一个shell文件，用于储存用户的个性化设置。在bash每次启动时都会加载<code>.bashrc</code>文件中的内容，并根据内容定制当前bash的配置和环境。</p><p><code>.bash_profile</code>和<code>.bashrc</code>两者在登陆bash时都会被bash执行，但是<code>.bash_profile</code>只在会话开始时被读取，而<code>.bashrc</code>在每次打开新的终端时都会被读取。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ll</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ls -lha&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #设置别名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nowdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;date &quot;+%Y-%m-%d %H:%M:%S&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH:路径 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#在原来PATH的后面继续添加了新的路径。export将变量提升成环境变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #立即生效</span></span></code></pre></div><p>全局环境变量</p><ul><li><code>/etc/profile</code> 为系统的全局环境变量设置，此文件为系统的每个用户设置环境信息</li><li><code>/etc/bashrc</code> 为每一个运行bash shell的用户执行此文件。当bash shell被打开时，该文件被读取，每次用户打开一个终端时，即执行此文件</li></ul><p>用户私有环境变量</p><ul><li><code>~/.profile</code>可以设定本用户专有的路径，环境变量等，它只在登入的时候执行一次</li><li><code>~/.bashrc</code>也是某用户专有设定文档，可以设定路径，命令别名，每次shell script的执行都会使用它一次</li><li><code>~/.bash_logout</code>当每次退出bash shell时, 执行该文件。</li></ul><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><h3 id="字符集合" tabindex="-1">字符集合 <a class="header-anchor" href="#字符集合" aria-label="Permalink to &quot;字符集合&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除了换行符的任意一个字符</td></tr><tr><td>\\d</td><td>匹配任何一个数字，相当于[0-9]的缩写</td></tr><tr><td>\\D</td><td>匹配任何一个非数字字符</td></tr><tr><td>\\s</td><td>匹配任何一个空白字符，包括空格、制表符、换页符等</td></tr><tr><td>\\S</td><td>匹配任何一个非空白字符</td></tr><tr><td>\\w</td><td>匹配任何一个字母、数字或下划线字符，相当于[a-za-z0-9_]的缩写</td></tr><tr><td>\\W</td><td>匹配任何一个非字母、数字或下划线字符</td></tr></tbody></table><h3 id="数量词" tabindex="-1">数量词 <a class="header-anchor" href="#数量词" aria-label="Permalink to &quot;数量词&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配零个或多个任意字符</td></tr><tr><td>+</td><td>匹配一个或多个前面的字符</td></tr><tr><td>?</td><td>匹配零个或一个前面的字符</td></tr><tr><td><code>{n}</code></td><td>匹配确定的n个前面的字符</td></tr><tr><td><code>{n,}</code></td><td>匹配至少n个前面的字符</td></tr><tr><td><code>{n,m}</code></td><td>匹配n到m个前面的字符</td></tr></tbody></table><h3 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h3><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始位置</td></tr><tr><td>$</td><td>匹配字符串的结尾位置</td></tr><tr><td>\\b</td><td>匹配一个词的边界，即字母、数字或下划线与非字母、数字或下划线之间</td></tr><tr><td>[]</td><td>用于定义字符集合</td></tr><tr><td>()</td><td>用于分组</td></tr><tr><td>\\1</td><td>引用正则表达式中第1个括号内的子表达式所匹配到的内容,以此类推</td></tr></tbody></table>`,31),n=[l];function d(e,p,r,k,o,c){return i(),t("div",null,n)}const y=s(h,[["render",d]]);export{F as __pageData,y as default};
