import{_ as o,c as t,o as d,a3 as e}from"./chunks/framework.7ep0oyv4.js";const r="/assets/240415-vOxIiF7iJk.DlAszw-c.png",m=JSON.parse('{"title":"五、CSS盒子模型","description":"","frontmatter":{},"headers":[],"relativePath":"css/5.md","filePath":"css/5.md"}'),c={name:"css/5.md"},l=e('<h1 id="五、css盒子模型" tabindex="-1">五、CSS盒子模型 <a class="header-anchor" href="#五、css盒子模型" aria-label="Permalink to &quot;五、CSS盒子模型&quot;">​</a></h1><h2 id="_1-css-长度单位" tabindex="-1">1. CSS 长度单位 <a class="header-anchor" href="#_1-css-长度单位" aria-label="Permalink to &quot;1. CSS 长度单位&quot;">​</a></h2><ol><li><code>px</code> ：像素。</li><li><code>em</code> ：相对于当前元素或其父元素的 <code>font-size</code> 的倍数。</li><li><code>rem</code> ：相对根字体大小，html标签就是根。</li><li><code>%</code> ：相对父元素计算。</li></ol><blockquote><p>注意： CSS 中设置长度，必须加单位，否则样式无效</p></blockquote><h2 id="_2-元素的显示模式" tabindex="-1">2. 元素的显示模式 <a class="header-anchor" href="#_2-元素的显示模式" aria-label="Permalink to &quot;2. 元素的显示模式&quot;">​</a></h2><ul><li><p><strong>块元素（block）</strong></p><blockquote><p>又称：内联元素</p><p>特点:</p><ol><li>在页面中<strong>不独占一行</strong>，一行中不能容纳下的行内元素，会在下一行继续从左到右排</li></ol><p>列。</p><ol start="2"><li>默认宽度：由<strong>内容</strong>撑开。</li></ol></blockquote></li><li><p><strong>行内元素（inline）</strong></p><blockquote><p>又称：内联元素</p><p>特点:</p><ol><li>在页面中<strong>不独占一行</strong>，一行中不能容纳下的行内元素，会在下一行继续从左到右排</li></ol><p>列。</p><ol start="2"><li>默认宽度：由<strong>内容</strong>撑开。</li><li>默认高度：由<strong>内容</strong>撑开。</li><li><strong>无法</strong>通过 CSS 设置宽高。</li></ol></blockquote></li><li><p><strong>行内块元素（inline-block）</strong></p><blockquote><p>又称：内联块元素</p><p>特点：</p><ol><li>在页面中<strong>不独占一行</strong>，一行中不能容纳下的行内元素，会在下一行继续从左到右排</li></ol><p>列。</p><ol start="2"><li>默认宽度：由<strong>内容</strong>撑开。</li><li>默认高度：由<strong>内容</strong>撑开。</li><li><strong>可以</strong>通过 CSS 设置宽高。</li></ol></blockquote></li></ul><p>**注意：**元素早期只分为：<strong>行内元素</strong>、<strong>块级元素</strong>，区分条件也只有一条：&quot;是否独占一行&quot;，如果按照这种分类方式，行内块元素应该算作行内元素。</p><h2 id="_3-总结各元素的显示模式" tabindex="-1">3. 总结各元素的显示模式 <a class="header-anchor" href="#_3-总结各元素的显示模式" aria-label="Permalink to &quot;3. 总结各元素的显示模式&quot;">​</a></h2><ul><li><p><strong>块元素（block）</strong></p><blockquote><ol start="2"><li>主体结构标签： <code>&lt;html&gt;</code> 、 <code>&lt;body&gt;</code></li><li>排版标签： <code>&lt;h1&gt; ~ &lt;h6&gt;</code> 、 <code>&lt;hr&gt;</code> 、 <code>&lt;p&gt;</code> 、 <code>&lt;pre&gt;</code> 、 <code>&lt;div&gt;</code></li><li>列表标签： <code>&lt;ul&gt;</code> 、 <code>&lt;ol&gt;</code> 、 <code>&lt;li&gt;</code> 、 <code>&lt;dl&gt;</code> 、 <code>&lt;dt&gt;</code> 、 <code>&lt;dd&gt;</code></li><li>表格相关标签： <code>&lt;table&gt;</code> 、 <code>&lt;tbody&gt;</code> 、 <code>&lt;thead&gt;</code> 、 <code>&lt;tfoot&gt;</code> 、 <code>&lt;tr&gt;</code> 、</li></ol><p><code>&lt;caption&gt;</code></p><ol start="5"><li><code>&lt;form&gt;</code> 与 <code>&lt;option&gt;</code></li></ol></blockquote></li><li><p><strong>行内元素（inline）</strong></p><blockquote><ol><li><p>文本标签： <code>&lt;br&gt;</code>、 <code>&lt;em&gt;</code> 、 <code>&lt;strong&gt;</code> 、 <code>&lt;sup&gt;</code> 、 <code>&lt;sub&gt;</code> 、 <code>&lt;del&gt;</code> 、 <code>&lt;ins&gt;</code></p></li><li><p><code>&lt;a&gt;</code> 与 <code>&lt;label&gt;</code></p></li></ol></blockquote></li><li><p><strong>行内块元素（inline-block）</strong></p><blockquote><ol><li><p>图片： <code>&lt;img&gt;</code></p></li><li><p>单元格： <code>&lt;td&gt;</code> 、 <code>&lt;th&gt;</code></p></li><li><p>表单控件： <code>&lt;input&gt;</code> 、 <code>&lt;textarea&gt;</code> 、 <code>&lt;select&gt;</code> 、 <code>&lt;button&gt;</code></p></li><li><p>框架标签： <code>&lt;iframe&gt;</code></p></li></ol></blockquote></li></ul><h2 id="_4-修改元素的显示模式" tabindex="-1">4. 修改元素的显示模式 <a class="header-anchor" href="#_4-修改元素的显示模式" aria-label="Permalink to &quot;4. 修改元素的显示模式&quot;">​</a></h2><p>通过 <code>CSS</code> 中的 <code>display</code> 属性可以修改元素的默认显示模式，常用值如下：</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>none</code></td><td>元素会被 <strong>隐藏</strong>。</td></tr><tr><td><code>block </code></td><td>元素将作为 <strong>块级元素</strong> 显示。</td></tr><tr><td><code>inline</code></td><td>元素将作为 <strong>内联元素</strong> 显示。</td></tr><tr><td><code>inline-block </code></td><td>元素将作为 <strong>行内块元素</strong> 显示。</td></tr></tbody></table><h2 id="_5-盒子模型的组成" tabindex="-1">5. 盒子模型的组成 <a class="header-anchor" href="#_5-盒子模型的组成" aria-label="Permalink to &quot;5. 盒子模型的组成&quot;">​</a></h2><p><code>CSS</code> 会把所有的 <code>HTML</code> 元素都看成一个<strong>盒子</strong>，所有的样式也都是基于这个盒子。</p><ol><li><strong>margin（外边距）：</strong> 盒子与外界的距离。</li><li><strong>border（边框）：</strong> 盒子的边框。</li><li><strong>padding（内边距）：</strong> 紧贴内容的补白区域。240415-vOxIiF7iJk.png</li><li>**content（内容）：**元素中的文本或后代元素都是它的内容。 <img src="'+r+'" alt="image-20240415171726753" style="zoom:50%;"></li></ol><p><strong>盒子的大小</strong> <strong>=</strong> <code>content</code> <strong>+</strong> <strong>左右</strong> <code>padding</code> <strong>+</strong> <strong>左右</strong> <code>border</code> <strong>。</strong></p><h2 id="_6-盒子内容区-content" tabindex="-1">6. 盒子内容区（content） <a class="header-anchor" href="#_6-盒子内容区-content" aria-label="Permalink to &quot;6. 盒子内容区（content）&quot;">​</a></h2><table><thead><tr><th><strong>CSS</strong> <strong>属性名</strong></th><th><strong>功能</strong></th><th><strong>属性值</strong></th></tr></thead><tbody><tr><td><code>width</code></td><td>设置内容区域宽度</td><td>长度</td></tr><tr><td><code>max-width</code></td><td>设置内容区域的最大宽度</td><td>长度</td></tr><tr><td><code>min-width</code></td><td>设置内容区域的最小宽度</td><td>长度</td></tr><tr><td><code>height</code></td><td>设置内容区域的高度</td><td>长度</td></tr><tr><td><code>max-height</code></td><td>设置内容区域的最大高度</td><td>长度</td></tr><tr><td><code>min-height</code></td><td>设置内容区域的最小高度</td><td>长度</td></tr></tbody></table><blockquote><p><strong>注意：</strong></p><p><code>max-width</code> 、 <code>min-width</code> 一般不与 <code>width</code> 一起使用。</p><p><code>max-height</code> 、 <code>min-height</code> 一般不与 <code>height</code> 一起使用。</p></blockquote><h2 id="_7-关于默认宽度" tabindex="-1">7. 关于默认宽度 <a class="header-anchor" href="#_7-关于默认宽度" aria-label="Permalink to &quot;7. 关于默认宽度&quot;">​</a></h2><p>所谓的默认宽度，就是<strong>不设置</strong> <code>width</code> <strong>属性时</strong>，元素所呈现出来的宽度。</p><p><strong>总宽度</strong> = 父的 <code>content</code> — 自身的左右 <code>margin</code> 。</p><p><strong>内容区的宽度</strong> = 父的 <code>content</code> — 自身的左右 <code>margin</code> — 自身的左右 <code>border</code> — 自身的左右</p><p><code>padding</code> 。</p><h2 id="_8-盒子内边距-padding" tabindex="-1">8. 盒子内边距（padding） <a class="header-anchor" href="#_8-盒子内边距-padding" aria-label="Permalink to &quot;8. 盒子内边距（padding）&quot;">​</a></h2><table><thead><tr><th><strong>CSS</strong> <strong>属性名</strong></th><th><strong>功能</strong></th><th><strong>属性值</strong></th></tr></thead><tbody><tr><td>padding-top</td><td>上内边距</td><td>长度</td></tr><tr><td>padding-right</td><td>右内边距</td><td>长度</td></tr><tr><td>padding-bottom</td><td>下内边距</td><td>长度</td></tr><tr><td>padding-left</td><td>左内边距</td><td>长度</td></tr><tr><td>padding</td><td>复合属性</td><td>长度，可以设置 1 ~ 4 个值</td></tr></tbody></table><p>padding 复合属性的使用规则：</p><ol><li><code>padding: 10px;</code> 四个方向内边距都是 <code>10px</code> 。</li><li><code>padding: 10px 20px;</code> 上 <code>10px</code> ，左右 <code>20px</code> 。（上下、左右）</li><li><code>padding: 10px 20px 30px;</code> 上 <code>10px</code> ，左右 <code>20px</code> ，下 <code>30px</code> 。（上、左右、下）</li><li><code>padding: 10px 20px 30px 40px;</code> 上 <code>10px</code> ，右 <code>20px</code> ，下 <code>30px</code> ，左 <code>40px</code> 。（上、右、下、左）</li></ol><blockquote><p>注意点：</p><ol><li><code>padding</code> 的值不能为负数。</li><li><strong>行内元素</strong> 的 左右内边距是没问题的，上下内边距不能完美的设置。</li><li><strong>块级元素</strong>、<strong>行内块元素</strong>，四个方向 <strong>内边距</strong> 都可以完美设置。</li></ol></blockquote><h2 id="_9-盒子边框-border" tabindex="-1">9. 盒子边框（border） <a class="header-anchor" href="#_9-盒子边框-border" aria-label="Permalink to &quot;9. 盒子边框（border）&quot;">​</a></h2><table><thead><tr><th><strong>CSS</strong> <strong>属性名</strong></th><th><strong>功能</strong></th><th><strong>属性值</strong></th></tr></thead><tbody><tr><td><code>border-style</code></td><td>边框线风格<br>复合了四个方向的边框风格</td><td><code>none</code> ： 默认值<br><code>solid</code> ： 实线<br><code>dashed</code> ： 虚线<br><code>dotted</code> ： 点线<br><code>double</code> ： 双实线<br>......</td></tr><tr><td><code>border-width</code></td><td>边框线宽度<br>复合了四个方向的边框宽度</td><td>长度，默认 <code>3px</code></td></tr><tr><td><code>border-color</code></td><td>边框线颜色<br>复合了四个方向的边框颜色</td><td>颜色，默认黑色</td></tr><tr><td><code>border</code></td><td>复合属性</td><td>值没有顺序和数量要求。</td></tr><tr><td><code>border-left</code><br><code>border-left-style</code><br><code>border-left-width</code><br><code>border-left-color</code><br><code>border-right</code><br><code>border-right-style</code><br><code>border-right-width</code><br><code>border-right-color</code><br><code>border-top</code><br><code>border-top-style</code><br><code>border-top-width</code><br><code>border-top-color</code><br><code>border-bottom</code><br><code>border-bottom-style</code><br><code>border-bottom-width</code><br><code>border-bottom-color</code></td><td>分别设置各个方向的边框</td><td>同上</td></tr></tbody></table><blockquote><p>边框相关属性共 <code>20</code> 个。</p><p><code>border-style</code> 、 <code>border-width</code> 、 <code>border-color</code> 其实也是复合属性。</p></blockquote><h2 id="_10-盒子外边距-margin" tabindex="-1">10. 盒子外边距_margin <a class="header-anchor" href="#_10-盒子外边距-margin" aria-label="Permalink to &quot;10. 盒子外边距_margin&quot;">​</a></h2><table><thead><tr><th><strong>CSS</strong> <strong>属性名</strong></th><th><strong>功能</strong></th><th><strong>属性值</strong></th></tr></thead><tbody><tr><td><code>margin-left</code></td><td><strong>左</strong>外边距</td><td><code>CSS</code> 中的长度值</td></tr><tr><td><code>margin-right</code></td><td><strong>右</strong>外边距</td><td><code>CSS</code> 中的长度值</td></tr><tr><td><code>margin-top</code></td><td><strong>上</strong>外边距</td><td><code>CSS</code> 中的长度值</td></tr><tr><td><code>margin-bottom</code></td><td><strong>下</strong>外边距</td><td><code>CSS</code> 中的长度值</td></tr><tr><td><code>margin</code></td><td>复合属性，可以写 <code>1~4</code> 个值，规律同 <code>padding</code> （顺时针）CSS 中的长度值</td><td><code>CSS</code> 中的长度值</td></tr></tbody></table><h3 id="_10-1-margin-注意事项" tabindex="-1">10.1 margin 注意事项 <a class="header-anchor" href="#_10-1-margin-注意事项" aria-label="Permalink to &quot;10.1 margin 注意事项&quot;">​</a></h3><blockquote><ol><li><p>子元素的 <code>margin</code>，是参考父元素的 <code>content</code> 计算的。（因为是父亲的 content 中承装着子元素）</p></li><li><p>上 <code>margin</code> 、左 <code>margin</code> ：影响自己的位置；下 <code>margin</code> 、右 <code>margin</code> ：影响后面兄弟元素的位置。</p></li><li><p>块级元素、行内块元素，均可以完美地设置四个方向的 <code>margin</code> ；但行内元素，左右<code>margin</code> 可以完美设置，上下 <code>margin</code> 设置无效。</p></li><li><p><code>margin</code> 的值也可以是 <code>auto</code> ，如果给一个<strong>块级元素</strong>设置左右 <code>margin</code> 都为 <code>auto</code> ，该块级元素会在父元素中水平居中。</p></li><li><p><code>margin</code> 的值可以是负值。</p></li></ol></blockquote><h3 id="_10-2-margin-塌陷问题" tabindex="-1">10.2 margin 塌陷问题 <a class="header-anchor" href="#_10-2-margin-塌陷问题" aria-label="Permalink to &quot;10.2 margin 塌陷问题&quot;">​</a></h3><p><strong>什么是 <code>margin</code> 塌陷？</strong></p><p>​ 第一个子元素的<strong>上</strong> <code>margin</code> 会作用在父元素上，最后一个子元素的<strong>下</strong> <code>margin</code> 会作用在父元素上。</p><p><strong>如何解决 <code>margin</code> 塌陷？</strong></p><ul><li>方案一： 给父元素设置不为 0 的 <code>padding</code> 。</li><li>方案二： 给父元素设置宽度不为 0 的 <code>border</code> 。</li><li>方案三：给父元素设置 css 样式 <code>overflow:hidden</code>。</li></ul><h3 id="_10-3-margin-合并问题" tabindex="-1">10.3 margin 合并问题 <a class="header-anchor" href="#_10-3-margin-合并问题" aria-label="Permalink to &quot;10.3 margin 合并问题&quot;">​</a></h3><p><strong>什么是 <code>margin</code> 合并？</strong></p><p>​ 上面兄弟元素的<strong>下外边距</strong>和下面兄弟元素的<strong>上外边距</strong>会合并，取一个最大的值，而不是相加。</p><p><strong>如何解决 <code>margin</code> 合并？</strong></p><p>​ 无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。</p><h2 id="_11-处理内容溢出" tabindex="-1">11. 处理内容溢出 <a class="header-anchor" href="#_11-处理内容溢出" aria-label="Permalink to &quot;11. 处理内容溢出&quot;">​</a></h2><table><thead><tr><th><strong>CSS</strong> <strong>属性名</strong></th><th><strong>功能</strong></th><th><strong>属性值</strong></th></tr></thead><tbody><tr><td><code>overflow</code></td><td>溢出内容的处理方式</td><td><code>visible</code> ：显示，默认值<br><code>hidden</code> ：隐藏<br><code>scroll</code> ：显示滚动条，不论内容是否溢出<br><code>auto</code> ：自动显示滚动条，内容不溢出不显示</td></tr><tr><td><code>overflow-x </code></td><td>水平方向溢出内容的处理方式</td><td>同 overflow</td></tr><tr><td><code>overflow-y</code></td><td>垂直方向溢出内容给的处理方式</td><td>同 overflow</td></tr></tbody></table><blockquote><p><strong>注意：</strong></p><ol><li><p><code>overflow-x</code> 、 <code>overflow-y</code> 不能一个是 <code>hidden</code> ，一个是 <code>visible</code> ，是实验性属性，不建议使用。</p></li><li><p><code>overflow</code> 常用的值是 <code>hidden</code> 和 <code>auto</code> ，除了能处理溢出的显示方式，还可以解决很多疑难杂症。</p></li></ol></blockquote><h2 id="_12-隐藏元素的方式" tabindex="-1">12. 隐藏元素的方式 <a class="header-anchor" href="#_12-隐藏元素的方式" aria-label="Permalink to &quot;12. 隐藏元素的方式&quot;">​</a></h2><p>**方式一：**<strong>visibility</strong> <strong>属性</strong></p><p><code>visibility</code> 属性默认值是 <code>show</code> ，如果设置为 <code>hidden</code> ，元素会隐藏。</p><p>元素看不见了，还占有原来的位置（元素的大小依然保持）。</p><p><strong>方式二：</strong> <strong>display</strong> <strong>属性</strong></p><p>设置 <code>display:none</code> ，就可以让元素隐藏。</p><p>彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高。</p><h2 id="_13-样式的继承" tabindex="-1">13. 样式的继承 <a class="header-anchor" href="#_13-样式的继承" aria-label="Permalink to &quot;13. 样式的继承&quot;">​</a></h2><p>有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。</p><p><strong>会继承的</strong> <strong>css</strong> <strong>属性</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字体属性、文本属性（除了vertical-align）、文字颜色 等。</span></span></code></pre></div><p><strong>不会继承的</strong> <strong>css</strong> <strong>属性</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">边框、背景、内边距、外边距、宽高、溢出方式 等。</span></span></code></pre></div><blockquote><p>一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。</p></blockquote><h2 id="_14-默认样式" tabindex="-1">14. 默认样式 <a class="header-anchor" href="#_14-默认样式" aria-label="Permalink to &quot;14. 默认样式&quot;">​</a></h2><p>元素一般都些默认的样式，例如：</p><ol><li><p><code>&lt;a&gt;</code> 元素：下划线、字体颜色、鼠标小手。</p></li><li><p><code>&lt;h1&gt; ~ &lt;h6&gt;</code> 元素： 文字加粗、文字大小、上下外边距。</p></li><li><p><code>&lt;p&gt;</code> 元素：上下外边距</p></li><li><p><code>&lt;ul&gt;</code> 、 <code>ol</code> 元素：左内边距</p></li><li><p><code>body</code> 元素： <code>8px</code> 外边距（4个方向）</p></li></ol><p>​ ......</p><p>优先级：<strong>元素的默认样式</strong> <strong>&gt;</strong> <strong>继承的样式</strong>，所以如果要重置元素的默认样式，选择器一定要直接选择器到该元素。</p><h2 id="_15-布局小技巧" tabindex="-1">15. 布局小技巧 <a class="header-anchor" href="#_15-布局小技巧" aria-label="Permalink to &quot;15. 布局小技巧&quot;">​</a></h2><ol><li><p>行内元素、行内块元素，可以被父元素当做文本处理。</p><blockquote><p>即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。 例如： <code>text-align</code> 、 <code>line-height</code> 、 <code>text-indent</code> 等。</p></blockquote></li><li><p>如何让子元素，在父亲中 <span style="color:red;font-weight:700;">水平居中</span>：</p><ul><li>若子元素为<strong>块元素</strong>，给父元素加上： <code>margin:0 auto;</code> 。<strong>子元素必须有明确宽度</strong>。</li><li>若子元素为<strong>行内元素</strong>、<strong>行内块元素</strong>，给父元素加上： <code>text-align:center</code> 。</li></ul></li><li><p>如何让子元素，在父亲中 <span style="color:red;font-weight:700;">垂直居中</span>：：</p><ul><li><p>若子元素为<strong>块元素</strong>，给子元素加上： <code>margin-top</code> ，值为：(父元素 <code>content</code> －子元素盒子总高) <code>/</code> 2。</p></li><li><p>若子元素为<strong>行内元素</strong>、<strong>行内块元素</strong>：</p><p>让父元素的 <code>height</code> = <code>line-height</code> ，每个子元素都加上： <code>verticalalign:middle;</code> 。 补充：若想绝对垂直居中，父元素 <code>font-size</code> 设置为 0 。</p></li></ul></li></ol><h2 id="_16-元素之间的空白问题" tabindex="-1">16. 元素之间的空白问题 <a class="header-anchor" href="#_16-元素之间的空白问题" aria-label="Permalink to &quot;16. 元素之间的空白问题&quot;">​</a></h2><p><strong>产生的原因：</strong></p><p>​ 行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。</p><p><strong>解决方案：</strong></p><ol><li><strong>方案一：</strong> 去掉换行和空格（不推荐）。</li><li><strong>方案二：</strong> 给父元素设置 <code>font-size:0</code> ，再给需要显示文字的元素，单独设置字体大小（推荐）。</li></ol><h2 id="_17-行内块的幽灵空白问题" tabindex="-1">17. 行内块的幽灵空白问题 <a class="header-anchor" href="#_17-行内块的幽灵空白问题" aria-label="Permalink to &quot;17. 行内块的幽灵空白问题&quot;">​</a></h2><p><strong>产生原因：</strong></p><p>行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。</p><p><strong>解决方案：</strong></p><ol><li><strong>方案一：</strong> 给行行内块设置 <code>vertical</code> ，值不为 <code>baseline</code> 即可，设置为 <code>middel</code> 、 <code>bottom</code> 、<code>top</code> 均可。</li><li><strong>方案二：</strong> 若父元素中只有一张图片，设置图片为 <code>display:block</code> 。</li><li><strong>方案三：</strong> 给父元素设置 <code>font-size: 0</code> 。如果该行内块内部还有文本，则需单独设置 <code>font-size</code> 。</li></ol>',80),n=[l];function i(a,s,g,p,h,b){return d(),t("div",null,n)}const k=o(c,[["render",i]]);export{m as __pageData,k as default};
