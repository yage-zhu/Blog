import{_ as i,c as s,o as a,a3 as e}from"./chunks/framework.7ep0oyv4.js";const t="/assets/240419-GZvLuERcHP.DUNGwzJI.png",l="/assets/240419-ixYAjwWdIb.DWpxKY00.png",o="/assets/240420-DXRynw1vmM.EE5IWDUP.png",d="/assets/240420-kpi9QTd3mV.BrNaT5iz.png",n="/assets/240420-IhIWaJQcoP.CqgVYOsJ.png",h="/assets/240420-JbyUZmJL7w.CEGDYz8V.png",p="/assets/240420-hAszkw1JGo.DACxmPUg.png",c="/assets/240420-FWDk9EA18T.Cg8mfRJF.png",r="/assets/240420-uNLu5d02ii.CR9sroeE.png",k="/assets/240420-At2l0hPyT9.CjsCTzmh.png",g="/assets/240420-uAJbYKvdYE.C6r0fBGF.png",E="/assets/240421-JLjBwWjutN.BQXi88Cd.png",D=JSON.parse('{"title":"十、CSS3 基本语法","description":"","frontmatter":{},"headers":[],"relativePath":"css/10.md","filePath":"css/10.md"}'),u={name:"css/10.md"},b=e(`<h1 id="十、css3-基本语法" tabindex="-1">十、CSS3 基本语法 <a class="header-anchor" href="#十、css3-基本语法" aria-label="Permalink to &quot;十、CSS3 基本语法&quot;">​</a></h1><h2 id="_1-css3-新增长度单位" tabindex="-1">1. CSS3 新增长度单位 <a class="header-anchor" href="#_1-css3-新增长度单位" aria-label="Permalink to &quot;1. CSS3 新增长度单位&quot;">​</a></h2><ol><li><code>rem</code> 根元素字体大小的倍数，只与根元素字体大小有关。</li><li><code>vw</code> 视口宽度的百分之多少 <code>10vw</code> 就是视口宽度的 <code>10%</code> 。</li><li><code>vh</code> 视口高度的百分之多少 <code>10vh</code> 就是视口高度的 <code>10%</code> 。</li><li><code>vmax</code> 视口宽高中大的那个的百分之多少。（了解即可）</li><li><code>vmin</code> 视口宽高中小的那个的百分之多少。（了解即可）</li></ol><h2 id="_2-css3-新增颜色设置方式" tabindex="-1">2. CSS3 新增颜色设置方式 <a class="header-anchor" href="#_2-css3-新增颜色设置方式" aria-label="Permalink to &quot;2. CSS3 新增颜色设置方式&quot;">​</a></h2><p><code>CSS3</code> 新增了三种颜色设置方式，分别是： <code>rgba</code> 、 <code>hsl</code> 、 <code>hsla</code> ，由于之前已经详细讲解，此处略过。</p><h2 id="_3-css3-新增选择器" tabindex="-1">3. CSS3 新增选择器 <a class="header-anchor" href="#_3-css3-新增选择器" aria-label="Permalink to &quot;3. CSS3 新增选择器&quot;">​</a></h2><p><code>CSS3</code> 新增的选择器有：动态伪类、目标伪类、语言伪类、 <code>UI</code> 伪类、结构伪类、否定伪类、伪元素；这些在 <code>CSS2</code> 中已经详细讲解，此处略过。</p><h2 id="_4-css3-新增盒模型相关属性" tabindex="-1">4. CSS3 新增盒模型相关属性 <a class="header-anchor" href="#_4-css3-新增盒模型相关属性" aria-label="Permalink to &quot;4. CSS3 新增盒模型相关属性&quot;">​</a></h2><h3 id="_4-1-box-sizing-怪异盒模型" tabindex="-1">4.1. box-sizing 怪异盒模型 <a class="header-anchor" href="#_4-1-box-sizing-怪异盒模型" aria-label="Permalink to &quot;4.1. box-sizing 怪异盒模型&quot;">​</a></h3><p>使用 <code>box-sizing</code> 属性可以设置盒模型的两种类型</p><table><thead><tr><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td><code>content-box</code></td><td><code>width</code> 和 <code>height</code> 设置的是盒子内容区的大小。（默认值）</td></tr><tr><td><code>border-box</code></td><td><code>width</code> 和 <code>height</code> 设置的是盒子总大小。（怪异盒模型）</td></tr></tbody></table><h3 id="_4-2-resize-调整盒子大小" tabindex="-1">4.2. resize 调整盒子大小 <a class="header-anchor" href="#_4-2-resize-调整盒子大小" aria-label="Permalink to &quot;4.2. resize 调整盒子大小&quot;">​</a></h3><p>使用 <code>resize</code> 属性可以控制是否允许用户调节元素尺寸。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>none</code></td><td>不允许用户调整元素大小。 (默认)</td></tr><tr><td><code>both </code></td><td>用户可以调节元素的宽度和高度 。</td></tr><tr><td><code>horizontal </code></td><td>用户可以调节元素的 <strong>宽度</strong> 。</td></tr><tr><td><code>vertical </code></td><td>用户可以调节元素的 <strong>高度</strong>。</td></tr></tbody></table><blockquote><p>必须搭配<code>overflow</code>使用</p></blockquote><h3 id="_4-3-box-shadow-盒子阴影" tabindex="-1">4.3. box-shadow 盒子阴影 <a class="header-anchor" href="#_4-3-box-shadow-盒子阴影" aria-label="Permalink to &quot;4.3. box-shadow 盒子阴影&quot;">​</a></h3><p>使用 <code>box-shadow</code> 属性为盒子添加阴影。</p><ul><li><p>语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h-shadow</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> v-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blur spread color inset;</span></span></code></pre></div></li><li><p>各个值的含义：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>h-shadow </code></td><td>水平阴影的位置，必须填写，可以为负值</td></tr><tr><td><code>v-shadow</code></td><td>垂直阴影的位置，必须填写，可以为负值</td></tr><tr><td><code>blur </code></td><td>可选，模糊距离</td></tr><tr><td><code>spread </code></td><td>可选，阴影的外延值</td></tr><tr><td><code>color </code></td><td>可选，阴影的颜色</td></tr><tr><td><code>inset </code></td><td>可选，将外部阴影改为内部阴影</td></tr></tbody></table></li><li><p>默认值： <code>box-shadow:none</code> 表示没有阴影</p></li><li><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写两个值，含义：水平位置、垂直位置 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写三个值，含义：水平位置、垂直位置、颜色 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px red;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写三个值，含义：水平位置、垂直位置、模糊值 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px 10px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写四个值，含义：水平位置、垂直位置、模糊值、颜色 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px 10px red;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写五个值，含义：水平位置、垂直位置、模糊值、外延值、颜色 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px 10px 10px blue;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 写六个值，含义：水平位置、垂直位置、模糊值、外延值、颜色、内阴影 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px 10px 20px 3px blue inset;</span></span></code></pre></div></li></ul><h3 id="_4-4-opacity-不透明度" tabindex="-1">4.4. opacity 不透明度 <a class="header-anchor" href="#_4-4-opacity-不透明度" aria-label="Permalink to &quot;4.4. opacity 不透明度&quot;">​</a></h3><ul><li><code>opacity</code> 属性能为整个元素添加透明效果， 值是 <code>0</code> 到 <code>1</code> 之间的小数， <code>0</code> 是完全透明， <code>1</code> 表示完全不透明。</li></ul><blockquote><p><code>opacity</code> 与 <code>rgba</code> 的区别？</p><p><code>opacity</code> 是一个属性，设置的是整个元素（包括元素里的内容）的不透明度。</p><p><code>rgba</code> 是颜色的设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度。</p></blockquote><h2 id="_5-css3-新增背景属性" tabindex="-1">5. CSS3 新增背景属性 <a class="header-anchor" href="#_5-css3-新增背景属性" aria-label="Permalink to &quot;5. CSS3 新增背景属性&quot;">​</a></h2><h3 id="_5-1-background-origin" tabindex="-1">5.1. background-origin <a class="header-anchor" href="#_5-1-background-origin" aria-label="Permalink to &quot;5.1. background-origin&quot;">​</a></h3><ul><li><p>作用：设置背景图的原点。</p></li><li><p>语法</p><ol><li><p><code>padding-box</code> ：从 <code>padding</code> 区域开始显示背景图像。—— 默认值</p></li><li><p><code>border-box</code> ： 从 <code>border</code> 区域开始显示背景图像。</p></li><li><p><code>content-box</code> ： 从 <code>content</code> 区域开始显示背景图像。</p></li></ol></li></ul><h3 id="_5-2-background-clip" tabindex="-1">5.2. background-clip <a class="header-anchor" href="#_5-2-background-clip" aria-label="Permalink to &quot;5.2. background-clip&quot;">​</a></h3><ul><li><p>作用：设置背景图的向外裁剪的区域。</p></li><li><p>语法</p><ol><li><p><code>border-box</code> ： 从 <code>border</code> 区域开始向外裁剪背景。 —— 默认值</p></li><li><p><code>padding-box</code> ： 从 <code>padding</code> 区域开始向外裁剪背景。</p></li><li><p><code>content-box</code> ： 从 <code>content</code> 区域开始向外裁剪背景。</p></li><li><p><code>text</code> ：背景图只呈现在文字上。</p></li></ol></li></ul><blockquote><p>注意：若值为 <code>text</code> ，那么 <code>backgroun-clip</code> 要加上 <code>-webkit-</code> 前缀。</p></blockquote><h3 id="_5-3-background-size" tabindex="-1">5.3. background-size <a class="header-anchor" href="#_5-3-background-size" aria-label="Permalink to &quot;5.3. background-size&quot;">​</a></h3><ul><li><p>作用：设置背景图的尺寸。</p></li><li><p>语法：</p><ol><li><p>用长度值指定背景图片大小，不允许负值。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 300px 200px;</span></span></code></pre></div></li><li><p>用百分比指定背景图片大小，不允许负值。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 100% 100%;</span></span></code></pre></div></li><li><p><code>auto </code>： 背景图片的真实大小。 —— 默认值</p></li><li><p><code>contain</code> ： 将背景图片等比缩放，使背景图片的宽或高，与容器的宽或高相等，再将完整背景图片包含在容器内，但要注意：可能会造成容器里部分区域没有背景图片。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contain;</span></span></code></pre></div></li><li><p><code>cover</code> ：将背景图片等比缩放，直到完全覆盖容器，图片会尽可能全的显示在元素上，但要注意：背景图片有可能显示不完整。—— 相对比较好的选择</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: cover;</span></span></code></pre></div></li></ol></li></ul><h3 id="_5-4-backgorund-复合属性" tabindex="-1">5.4. backgorund 复合属性 <a class="header-anchor" href="#_5-4-backgorund-复合属性" aria-label="Permalink to &quot;5.4. backgorund 复合属性&quot;">​</a></h3><ul><li><p>语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background: color url repeat position / size origin clip</span></span></code></pre></div><blockquote><p><strong>注意：</strong></p><ol><li><p><code>origin</code> 和 <code>clip</code> 的值如果一样，如果只写一个值，则 origin 和 clip 都设置；如果设置了两个值，前面的是 <code>origin</code> ，后面的 <code>clip</code> 。</p></li><li><p><code>size</code> 的值必须写在 <code>position</code> 值的后面，并且用 <code>/</code> 分开。</p></li></ol></blockquote></li></ul><h3 id="_5-5-多背景图" tabindex="-1">5.5. 多背景图 <a class="header-anchor" href="#_5-5-多背景图" aria-label="Permalink to &quot;5.5. 多背景图&quot;">​</a></h3><p><code>CSS3</code> 允许元素设置多个背景图片。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 添加多个背景图 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background: url(.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">./images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bg-lt</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url(.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">./images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bg-rt</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right top,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url(.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">./images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bg-lb</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left bottom,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url(.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">./images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bg-rb</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right bottom;</span></span></code></pre></div><h2 id="_6-css3新增边框属性" tabindex="-1">6. CSS3新增边框属性 <a class="header-anchor" href="#_6-css3新增边框属性" aria-label="Permalink to &quot;6. CSS3新增边框属性&quot;">​</a></h2><h3 id="_6-1-边框圆角" tabindex="-1">6.1 边框圆角 <a class="header-anchor" href="#_6-1-边框圆角" aria-label="Permalink to &quot;6.1 边框圆角&quot;">​</a></h3><ul><li><p>在 <code>CSS3</code> 中，使用 <code>border-radius</code> 属性可以将盒子变为圆角。</p></li><li><p>同时设置四个角的圆角：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:10px;</span></span></code></pre></div></li><li><p>分开设置每个角的圆角（几乎不用）：</p><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td><code>border-top-left-radius</code></td><td>设置左上角圆角半径：<br>1. 一个值是正圆半径，<br>2. 两个值分别是椭圆的 <code>x</code> 半径、 <code>y</code> 半径。</td></tr><tr><td><code>border-top-right-radius</code></td><td>设置右上角圆角半径：<br>1. 一个值是正圆半径，<br>2. 两个值分别是椭圆的 <code>x</code> 半径、 <code>y</code> 半径。</td></tr><tr><td><code>border-bottom-right-radius</code></td><td>设置右下角圆角半径：<br>1. 一个值是正圆半径，<br>2. 两个值分别是椭圆的 <code>x</code> 半径、 <code>y</code> 半径。</td></tr><tr><td><code>border-bottom-left-radius</code></td><td>设置左下角圆角半径：<br>1. 一个值是正圆半径，<br>2. 两个值分别是椭圆的 <code>x</code> 半径、 <code>y</code> 半径。</td></tr></tbody></table></li><li><p>分开设置每个角的圆角，综合写法（几乎不用）：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-raidus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 左上角x 右上角x 右下角x 左下角x / 左上y 右上y 右下y 左下y</span></span></code></pre></div></li></ul><h3 id="_6-2-边框外轮廓-了解" tabindex="-1">6.2 边框外轮廓（了解） <a class="header-anchor" href="#_6-2-边框外轮廓-了解" aria-label="Permalink to &quot;6.2 边框外轮廓（了解）&quot;">​</a></h3><ul><li><p><code>outline-width</code> ：外轮廓的宽度。</p></li><li><p><code>outline-color</code> ：外轮廓的颜色。</p></li><li><p><code>outline-style</code> ：外轮廓的风格。</p><ul><li><code>none</code> ： 无轮廓</li><li><code>dotted</code> ： 点状轮廓</li><li><code>dashed</code> ： 虚线轮廓</li><li><code>solid</code> ： 实线轮廓</li><li><code>double</code> ： 双线轮廓</li></ul></li><li><p><code>outline-offset</code> 设置外轮廓与边框的距离，正负值都可以设置。</p><blockquote><p>注意： <code>outline-offset</code> 不是 <code>outline</code> 的子属性，是一个独立的属性。</p></blockquote></li><li><p><code>outline</code>： 复合属性</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outline:50px solid blue;</span></span></code></pre></div></li></ul><h2 id="_7-css3新增文本属性" tabindex="-1">7. CSS3新增文本属性 <a class="header-anchor" href="#_7-css3新增文本属性" aria-label="Permalink to &quot;7. CSS3新增文本属性&quot;">​</a></h2><h3 id="_7-1-文本阴影" tabindex="-1">7.1 文本阴影 <a class="header-anchor" href="#_7-1-文本阴影" aria-label="Permalink to &quot;7.1 文本阴影&quot;">​</a></h3><ul><li><p>在 <code>CSS3</code> 中，我们可以使用 <code>text-shadow</code> 属性给文本添加阴影</p></li><li><p>语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h-shadow</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> v-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blur color;</span></span></code></pre></div><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>h-shadow </code></td><td>必需写，水平阴影的位置。允许负值。</td></tr><tr><td><code>v-shadow</code></td><td>必需写，垂直阴影的位置。允许负值。</td></tr><tr><td><code>blur </code></td><td>可选，模糊的距离。</td></tr><tr><td><code>color </code></td><td>可选，阴影的颜色。</td></tr></tbody></table></li></ul><h3 id="_7-2-文本换行" tabindex="-1">7.2 文本换行 <a class="header-anchor" href="#_7-2-文本换行" aria-label="Permalink to &quot;7.2 文本换行&quot;">​</a></h3><ul><li><p>在 <code>CSS3</code> 中，我们可以使用 <code>white-space</code> 属性设置文本换行方式。</p></li><li><p>常用值如下：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>normal </code></td><td>文本超出边界自动换行，文本中的换行被浏览器识别为一个空格。（默认值）</td></tr><tr><td><code>pre</code></td><td>原样输出，与 <code>pre</code> 标签的效果相同。</td></tr><tr><td><code>pre-wrap </code></td><td>在 <code>pre</code> 效果的基础上，超出元素边界自动换行。。</td></tr><tr><td><code>pre-line </code></td><td>在 <code>pre</code> 效果的基础上，超出元素边界自动换行，且只识别文本中的换行，空格会忽略。</td></tr><tr><td><code>nowrap</code></td><td>强制不换行</td></tr></tbody></table></li></ul><h3 id="_7-3-文本溢出" tabindex="-1">7.3 文本溢出 <a class="header-anchor" href="#_7-3-文本溢出" aria-label="Permalink to &quot;7.3 文本溢出&quot;">​</a></h3><ul><li><p>在 <code>CSS3</code> 中，我们可以使用 <code>text-overflow</code> 属性设置文本内容溢出时的呈现模式。</p></li><li><p>常用值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>clip</code></td><td>当内联内容溢出时，将溢出部分裁切掉。 （默认值）</td></tr><tr><td><code>ellipsis</code></td><td>当内联内容溢出块容器时，将溢出部分替换为 ... 。</td></tr></tbody></table><blockquote><p>注意：要使得 <code>text-overflow</code> 属性生效，块容器必须显式定义 <code>overflow</code> 为非 <code>visible</code>值， <code>white-space</code> 为 <code>nowrap</code> 值。</p></blockquote></li></ul><h3 id="_7-4-文本修饰" tabindex="-1">7.4 文本修饰 <a class="header-anchor" href="#_7-4-文本修饰" aria-label="Permalink to &quot;7.4 文本修饰&quot;">​</a></h3><ul><li><p>CSS3 升级了 <code>text-decoration</code> 属性，让其变成了复合属性。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-decoration-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> || </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-decoration-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> || </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">text-decoration-color</span></span></code></pre></div></li><li><p>子属性及其含义：</p><ul><li><p><code>text-decoration-line</code> 设置文本装饰线的位置</p><ul><li><code>none</code> ： 指定文字无装饰 （默认值）</li><li><code>underline</code> ： 指定文字的装饰是下划线</li><li><code>overline</code> ： 指定文字的装饰是上划线</li><li><code>line-through</code> ： 指定文字的装饰是贯穿线</li></ul></li><li><p><code>text-decoration-style</code> 文本装饰线条的形状</p><ul><li><p><code>solid</code> ： 实线 （默认）</p><p><code>double</code> ： 双线</p><p><code>dotted</code> ： 点状线条</p><p><code>dashed</code> ： 虚线</p><p><code>wavy</code> ： 波浪线</p></li></ul></li><li><p><code>text-decoration-color</code> 文本装饰线条的颜色</p></li></ul></li></ul><h3 id="_7-5-文本描边" tabindex="-1">7.5 文本描边 <a class="header-anchor" href="#_7-5-文本描边" aria-label="Permalink to &quot;7.5 文本描边&quot;">​</a></h3><p>注意：文字描边功能仅 <code>webkit</code> 内核浏览器支持。</p><ul><li><code>-webkit-text-stroke-width</code> ：设置文字描边的宽度，写长度值。</li><li><code>-webkit-text-stroke-color</code> ：设置文字描边的颜色，写颜色值。</li><li><code>-webkit-text-stroke</code> ：复合属性，设置文字描边宽度和颜色。</li></ul><h2 id="_8-css3-新增渐变" tabindex="-1">8. CSS3 新增渐变 <a class="header-anchor" href="#_8-css3-新增渐变" aria-label="Permalink to &quot;8. CSS3 新增渐变&quot;">​</a></h2><h3 id="_8-1-线性渐变" tabindex="-1">8.1 线性渐变 <a class="header-anchor" href="#_8-1-线性渐变" aria-label="Permalink to &quot;8.1 线性渐变&quot;">​</a></h3><p><img src="`+t+'" alt="image-20240419161533258" loading="lazy"></p><ul><li><p>多个颜色之间的渐变， 默认<strong>从上到下</strong> 渐变</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: linear-gradient(red,yellow,green);</span></span></code></pre></div></li><li><p>使用关键词设置线性 <strong>渐变的方向</strong>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: linear-gradient(to right top,red,yellow,green)</span></span></code></pre></div></li><li><p>使用角度设置线性 <strong>渐变的方向</strong>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: linear-gradient(20deg,red,yellow,green);</span></span></code></pre></div></li><li><p>调整开始 <strong>渐变的位置</strong>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: linear-gradient(red 50px,yellow 100px ,green 150px);</span></span></code></pre></div></li></ul><h3 id="_8-2-径向渐变" tabindex="-1">8.2 径向渐变 <a class="header-anchor" href="#_8-2-径向渐变" aria-label="Permalink to &quot;8.2 径向渐变&quot;">​</a></h3><p><img src="'+l+`" alt="image-20240419162813732" loading="lazy"></p><ul><li><p>多个颜色之间的渐变， 默认 <strong>从圆心四散</strong>。（注意：不一定是正圆，要看容器本身宽高比）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(red,yellow,green);</span></span></code></pre></div></li><li><p>使用 <strong>关键词</strong> 调整渐变圆的 <strong>圆心位置</strong>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(at right top,red,yellow,green);</span></span></code></pre></div></li><li><p>使用 <strong>像素值</strong> 调整渐变圆的 <strong>圆心位置</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(at 100px 50px,red,yellow,green);</span></span></code></pre></div></li><li><p>调整渐变形状为 <strong>正圆</strong> 。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,red,yellow,green);</span></span></code></pre></div></li><li><p>调整形状的 <strong>半径</strong> 。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(100px,red,yellow,green);</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(50px 100px,red,yellow,green);</span></span></code></pre></div></li><li><p>调整开始 <strong>渐变的位置</strong>。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(red 50px,yellow 100px,green 150px);</span></span></code></pre></div></li><li><p>综合写法</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radial-gradient(100px 50px at 150px 150px,red 50px,yellow 100px,green 150px);</span></span></code></pre></div></li></ul><h3 id="_8-3-重复渐变" tabindex="-1">8.3 重复渐变 <a class="header-anchor" href="#_8-3-重复渐变" aria-label="Permalink to &quot;8.3 重复渐变&quot;">​</a></h3><p>无论线性渐变，还是径向渐变，<strong>在没有发生渐变的位置</strong>，继续进行渐变，就为重复渐变。</p><ul><li>使用 <code>repeating-linear-gradient</code> 进行重复线性渐变，具体参数同 <code>linear-gradient</code> 。</li><li>使用 <code>repeating-radial-gradient</code> 进行重复径向渐变，具体参数同 <code>radial-gradient</code> 。</li></ul><blockquote><p>我们可以利用渐变，做出很多有意思的效果：例如：横格纸、立体球等等。</p></blockquote><h2 id="_9-web-字体" tabindex="-1">9. web 字体 <a class="header-anchor" href="#_9-web-字体" aria-label="Permalink to &quot;9. web 字体&quot;">​</a></h2><h3 id="_9-1-基本用法" tabindex="-1">9.1 基本用法 <a class="header-anchor" href="#_9-1-基本用法" aria-label="Permalink to &quot;9.1 基本用法&quot;">​</a></h3><p>可以通过 <code>@font-face</code> 指定字体的具体地址，浏览器会自动下载该字体，这样就不依赖用户电脑上的字体了。</p><ul><li><p>语法（简写方式）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@font-face</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-family</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;情书字体&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./方正手迹.ttf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>语法（高兼容性写法）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@font-face</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-family</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webfont&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.eot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE9 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.eot?#iefix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;embedded-opentype&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE6-IE8 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.woff2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;woff2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.woff&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;woff&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* chrome、firefox */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.ttf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;truetype&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* chrome、firefox、opera、Safari,Android*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webfont.svg#webfont&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;svg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* iOS 4.1- */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="_9-2-定制字体" tabindex="-1">9.2 定制字体 <a class="header-anchor" href="#_9-2-定制字体" aria-label="Permalink to &quot;9.2 定制字体&quot;">​</a></h3><ul><li><p>中文的字体文件很大，使用完整的字体文件不现实，通常针对某几个文字进行单独定制。</p></li><li><p>可使用阿里 Web 字体定制工具：<strong><a href="https://www.iconfont.cn/webfont" target="_blank" rel="noreferrer">https://www.iconfont.cn/webfont</a></strong></p></li></ul><h3 id="_9-3-字体图标" tabindex="-1">9.3 字体图标 <a class="header-anchor" href="#_9-3-字体图标" aria-label="Permalink to &quot;9.3 字体图标&quot;">​</a></h3><ul><li>相比图片更加清晰。</li><li>灵活性高，更方便改变大小、颜色、风格等。</li><li>兼容性好， IE 也能支持。</li></ul><blockquote><p>字体图标的具体使用方式，每个平台不尽相同，最好参考平台使用指南。</p><p>阿里图标官网地址：<strong><a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">https://www.iconfont.cn/</a></strong></p></blockquote><h2 id="_10-2d变换" tabindex="-1">10. 2D变换 <a class="header-anchor" href="#_10-2d变换" aria-label="Permalink to &quot;10. 2D变换&quot;">​</a></h2><h3 id="_10-1-2d位移" tabindex="-1">10.1. 2D位移 <a class="header-anchor" href="#_10-1-2d位移" aria-label="Permalink to &quot;10.1. 2D位移&quot;">​</a></h3><p><code>2D</code> 位移可以改变元素的位置，具体使用方式如下：</p><ol><li><p>先给元素添加 <strong>转换属性</strong> <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值，相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>translateX</code></td><td>设置水平方向位移，需指定长度值；若指定的是百分比，是参考自身宽度的百分比。</td></tr><tr><td><code>translateY</code></td><td>设置垂直方向位移，需指定长度值；若指定的是百分比，是参考自身高度的百分比。</td></tr><tr><td><code>translate </code></td><td>一个值代表水平方向，两个值代表：水平和垂直方向。</td></tr></tbody></table></li><li><p>注意点：</p><blockquote><ol><li><p>位移与相对定位很相似，都不脱离文档流，不会影响到其它元素。</p></li><li><p>与相对定位的区别：相对定位的百分比值，参考的是其父元素；位移的百分比值，参考的是其自身。</p></li><li><p>浏览器针对位移有优化，与定位相比，浏览器处理位移的效率更高。</p></li><li><p><code>transform</code> 可以链式编写，例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: translateX(30px) translateY(40px);</span></span></code></pre></div></li><li><p><span style="color:red;font-weight:700;">位移对行内元素无效。</span></p></li><li><p>位移配合定位，可实现元素水平垂直居中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></blockquote></li></ol><h3 id="_10-2-2d缩放" tabindex="-1">10.2. 2D缩放 <a class="header-anchor" href="#_10-2-2d缩放" aria-label="Permalink to &quot;10.2. 2D缩放&quot;">​</a></h3><p><code>2D</code> 缩放是指：让元素放大或缩小，具体使用方式如下：</p><ol><li><p>先给元素添加 转换属性 <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值，相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>scaleX</code></td><td>设置水平方向的缩放比例，值为一个数字， <code>1</code> 表示不缩放，大于 <code>1</code> 放大，小于 <code>1</code> 缩小。</td></tr><tr><td><code>scaleY</code></td><td>设置垂直方向的缩放比例，值为一个数字， <code>1</code> 表示不缩放，大于 <code>1</code> 放大，小于 <code>1</code> 缩小。</td></tr><tr><td><code>scale</code></td><td>同时设置水平方向、垂直方向的缩放比例，一个值代表同时设置水平和垂直缩放；两个值分别代表：水平缩放、垂直缩放。</td></tr></tbody></table></li><li><p>注意点：</p><blockquote><ol><li><code>scale</code>的值，是支持写负数的，但几乎不用，因为容易让人产生误解。</li><li>借助缩放，可实现小于 <code>12px</code> 的文字。</li><li>对行内元素无效。</li></ol></blockquote></li></ol><h3 id="_10-3-2d旋转" tabindex="-1">10.3. 2D旋转 <a class="header-anchor" href="#_10-3-2d旋转" aria-label="Permalink to &quot;10.3. 2D旋转&quot;">​</a></h3><p><code>2D</code> 旋转是指：让元素在二维平面内，顺时针旋转或逆时针旋转，具体使用方式如下：</p><ol><li><p>先给元素添加 转换属性 <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值，相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>rotate</code></td><td>设置旋转角度，需指定一个角度值( <code>deg</code> )，正值顺时针，负值逆时针。</td></tr></tbody></table></li></ol><blockquote><p>注意： <code>rotateZ(20deg)</code> 相当于 <code>rotate(20deg)</code> ，当然到了 <code>3D</code> 变换的时候，还能写： <code>rotate(x,x,x)</code></p></blockquote><h3 id="_10-4-2d扭曲-了解" tabindex="-1">10.4. 2D扭曲（了解） <a class="header-anchor" href="#_10-4-2d扭曲-了解" aria-label="Permalink to &quot;10.4. 2D扭曲（了解）&quot;">​</a></h3><p><code>2D</code> 扭曲是指：让元素在二维平面内被“拉扯”，进而“走形”，实际开发几乎不用，了解即可，具体使用方 式如下：</p><ol><li><p>先给元素添加 <strong>转换属性</strong> <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值，相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>skewX</code></td><td>设置元素在水平方向扭曲，值为角度值，会将元素的左上角、右下角 <code>左右拉扯</code> 。</td></tr><tr><td><code>skewY </code></td><td>设置元素在垂直方向扭曲，值为角度值，会将元素的左上角、右下角 <code>上下拉扯</code> 。</td></tr><tr><td><code>skew</code></td><td>一个值代表 <code>skewX</code> ，两个值分别代表： <code>skewX</code> 、 <code>skewY</code></td></tr></tbody></table></li></ol><h3 id="_10-5-多重变换" tabindex="-1">10.5. 多重变换 <a class="header-anchor" href="#_10-5-多重变换" aria-label="Permalink to &quot;10.5. 多重变换&quot;">​</a></h3><p>多个变换，可以同时使用一个 <code>transform</code> 来编写。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: translate(-50%, -50%) rotate(45deg);</span></span></code></pre></div><blockquote><p>注意点：多重变换时，建议最后旋转。因为旋转后坐标系也会跟着旋转。</p></blockquote><h3 id="_10-6-变换原点" tabindex="-1">10.6. 变换原点 <a class="header-anchor" href="#_10-6-变换原点" aria-label="Permalink to &quot;10.6. 变换原点&quot;">​</a></h3><ul><li>元素变换时，默认的原点是元素的中心，使用 <code>transform-origin</code> 可以设置变换的原点。</li><li>修改变换原点对位移没有影响， 对旋转和缩放会产生影响。</li><li>如果提供两个值，第一个用于横坐标，第二个用于纵坐标。</li><li>如果只提供一个，若是像素值，表示横坐标，纵坐标取 <code>50%</code> ；若是关键词，则另一个坐标取 <code>50%</code></li></ul><blockquote><ol><li><code>transform-origin: 50% 50%</code> ， 变换原点在元素的中心位置，百分比是相对于自身。—— 默认值</li><li><code>transform-origin: left top</code> ，变换原点在元素的左上角 。</li><li><code>transform-origin: 50px 50px</code> ， 变换原点距离元素左上角 <code>50px 50px</code> 的位置。</li><li><code>transform-origin: 0</code> ，只写一个值的时候，第二个值默认为 <code>50%</code> 。</li></ol></blockquote><h2 id="_11-3d变换" tabindex="-1">11. 3D变换 <a class="header-anchor" href="#_11-3d变换" aria-label="Permalink to &quot;11. 3D变换&quot;">​</a></h2><h3 id="_11-1-开启3d空间" tabindex="-1">11.1. 开启3D空间 <a class="header-anchor" href="#_11-1-开启3d空间" aria-label="Permalink to &quot;11.1. 开启3D空间&quot;">​</a></h3><p>重要原则：元素进行 <code>3D</code> 变换的首要操作：<span style="color:red;font-weight:700;">父元素</span> 必须开启 <code>3D</code> 空间！</p><blockquote><p>使用 <code>transform-style</code> 开启 3D 空间，可选值如下：</p><ul><li><code>flat</code> ： 让子元素位于此元素的二维平面内（ <code>2D</code> 空间）—— 默认值</li><li><code>preserve-3d</code> ： 让子元素位于此元素的三维空间内（ <code>3D</code> 空间）</li></ul></blockquote><h3 id="_11-2-设置景深" tabindex="-1">11.2. 设置景深 <a class="header-anchor" href="#_11-2-设置景深" aria-label="Permalink to &quot;11.2. 设置景深&quot;">​</a></h3><p>何为景深？—— 指定观察者与 <code>z=0</code> 平面的距离，能让发生 <code>3D</code> 变换的元素，产生 <strong>透视效果(近大远小)</strong>，看来更加立体。</p><blockquote><p>使用 <code>perspective</code> 设置景深，可选值如下：</p><ul><li><code>none</code> ： 不指定透视 ——（默认值）</li><li>长度值 ： 指定观察者距离 <code>z=0</code> 平面的距离，不允许负值。</li></ul><p>注意： <code>perspective</code> 设置给发生 <code>3D</code> 变换元素的 <span style="color:red;font-weight:700;">父元素</span>！</p></blockquote><h3 id="_11-3-透视点位置" tabindex="-1">11.3. 透视点位置 <a class="header-anchor" href="#_11-3-透视点位置" aria-label="Permalink to &quot;11.3. 透视点位置&quot;">​</a></h3><p>所谓透视点位置，就是观察者位置；默认的透视点在元素的中心。</p><blockquote><p>使用 <code>perspective-origin</code> 设置观察者位置（透视点的位置），例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 相对坐标轴往右偏移400px， 往下偏移300px（相当于人蹲下300像素，然后向右移动400像素看元素）*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">perspective-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 400px 300px;</span></span></code></pre></div><p>注意：通常情况下，我们不需要调整透视点位置。</p></blockquote><h3 id="_11-4-3d-位移" tabindex="-1">11.4. 3D 位移 <a class="header-anchor" href="#_11-4-3d-位移" aria-label="Permalink to &quot;11.4. 3D 位移&quot;">​</a></h3><p><code>3D</code> 位移是在 <code>2D</code> 位移的基础上，可以让元素沿 <code>z</code> 轴位移，具体使用方式如下：</p><ol><li><p>先给元素添加 <strong>转换属性</strong> <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值， <code>3D</code> 相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>translateZ</code></td><td>设置 <code>z</code> 轴位移，需指定长度值，正值向屏幕外，负值向屏幕里，且不能写百分比。</td></tr><tr><td><code>translate3d</code></td><td>第<code>1</code>个参数对应 <code>x</code> 轴，第<code>2</code>个参数对应 <code>y</code> 轴，第<code>3</code>个参数对应 <code>z</code> 轴，且均不能省略。</td></tr></tbody></table></li></ol><h3 id="_11-5-3d-旋转" tabindex="-1">11.5. 3D 旋转 <a class="header-anchor" href="#_11-5-3d-旋转" aria-label="Permalink to &quot;11.5. 3D 旋转&quot;">​</a></h3><p><code>3D</code> 旋转是在 <code>2D</code> 旋转的基础上，可以让元素沿 <code>x</code> 轴和 <code>y</code> 轴旋转，具体使用方式如下：</p><ol><li><p>先给元素添加 转换属性 transform</p></li><li><p>编写 transform 的具体值， 3D 相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>rotateX</code></td><td>设置 <code>x</code> 轴旋转角度，需指定一个角度值( <code>deg</code> )，面对 <code>x</code> 轴正方向：正值顺时针，负值逆时针。</td></tr><tr><td><code>rotateY</code></td><td>设置 <code>y</code> 轴旋转角度，需指定一个角度值( <code>deg</code> )，面对 <code>y</code> 轴正方向：正值顺时针，负值逆时针。</td></tr><tr><td><code>rotate3d</code></td><td>前 3 个参数分别表示坐标轴： <code>x</code> , <code>y</code> , <code>z</code> ，第 <code>4</code> 个参数表示旋转的角度，参数不允许省略。<br>例如： <code>transform: rotate3d(1,1,1,30deg)</code>，意思是： <code>x</code> 、 <code>y</code> 、 <code>z</code> 分别旋转<code>30</code>度。</td></tr></tbody></table></li></ol><h3 id="_11-6-3d-缩放" tabindex="-1">11.6. 3D 缩放 <a class="header-anchor" href="#_11-6-3d-缩放" aria-label="Permalink to &quot;11.6. 3D 缩放&quot;">​</a></h3><p><code>3D</code> 缩放是在 <code>2D</code> 缩放的基础上，可以让元素沿 <code>z</code> 轴缩放，具体使用方式如下：</p><ol><li><p>先给元素添加 <strong>转换属性</strong> <code>transform</code></p></li><li><p>编写 <code>transform</code> 的具体值， <code>3D</code> 相关可选值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>scaleZ</code></td><td>设置 <code>z</code> 轴方向的缩放比例，值为一个数字， <code>1</code> 表示不缩放，大于 <code>1</code> 放大，小于 <code>1</code> 缩小。</td></tr><tr><td><code>scale3d</code></td><td>第<code>1</code>个参数对应 <code>x</code> 轴，第<code>2</code>个参数对应 <code>y</code> 轴，第<code>3</code>个参数对应 <code>z</code> 轴，参数不允许省略。</td></tr></tbody></table></li></ol><blockquote><p>二维空间中<code>scaleZ()</code>沿 Z 轴的缩放变换看不到效果，只有再旋转之后才能看到变化。</p></blockquote><h3 id="_11-7-多重变换" tabindex="-1">11.7. 多重变换 <a class="header-anchor" href="#_11-7-多重变换" aria-label="Permalink to &quot;11.7. 多重变换&quot;">​</a></h3><p>多个变换，可以同时使用一个 <code>transform</code> 来编写。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: translateZ(100px) scaleZ(3) rotateY(40deg);</span></span></code></pre></div><blockquote><p>注意点：多重变换时，建议最后旋转。</p></blockquote><h3 id="_11-8-背部可见性" tabindex="-1">11.8. 背部可见性 <a class="header-anchor" href="#_11-8-背部可见性" aria-label="Permalink to &quot;11.8. 背部可见性&quot;">​</a></h3><p>使用 <code>backface-visibility</code> 指定元素背面，在面向用户时是否可见，常用值如下：</p><ul><li><code>visible</code> ： 指定元素背面可见，允许显示正面的镜像。—— 默认值</li><li><code>hidden</code> ： 指定元素背面不可见</li></ul><blockquote><p>注意： <code>backface-visibility</code> 需要加在发生 <code>3D</code> 变换元素的自身上。</p></blockquote><h2 id="_12-过渡" tabindex="-1">12. 过渡 <a class="header-anchor" href="#_12-过渡" aria-label="Permalink to &quot;12. 过渡&quot;">​</a></h2><p>过渡可以在不使用 <code>Flash</code> 动画，不使用 <code>JavaScript</code> 的情况下，让元素从一种样式，平滑过渡为另一 种样式。</p><h3 id="_12-1-transition-property" tabindex="-1">12.1. transition-property <a class="header-anchor" href="#_12-1-transition-property" aria-label="Permalink to &quot;12.1. transition-property&quot;">​</a></h3><ul><li>作用：定义哪个属性需要过渡，只有在该属性中定义的属性（比如宽、高、颜色等）才会以有过渡 效果。</li><li>常用值： <ol><li><code>none</code> ：不过渡任何属性。</li><li><code>all</code> ：过渡所有能过渡的属性。</li><li>具体某个属性名 ，例如： <code>width</code> 、 <code>heigth</code>、<code>backgroup-color</code> ，若有多个以逗号分隔。</li></ol></li></ul><blockquote><p>不是所有的属性都能过渡，值为数字，或者值能转为数字的属性，都支持过渡，否则不支持过渡。 常见的支持过渡的属性有：颜色、长度值、百分比、 <code>z-index</code> 、 <code>opacity</code> 、 <code>2D</code> 变换属性、 <code>3D</code> 变换属性、阴影。</p></blockquote><h3 id="_12-2-transition-duration" tabindex="-1">12.2. transition-duration <a class="header-anchor" href="#_12-2-transition-duration" aria-label="Permalink to &quot;12.2. transition-duration&quot;">​</a></h3><ul><li>作用：设置过渡的持续时间，即：一个状态过渡到另外一个状态耗时多久。</li><li>常用值： <ol><li><code>0</code> ：没有任何过渡时间 —— 默认值。</li><li><code>s</code> 或 <code>ms</code> ：秒或毫秒。</li><li><code>列表</code> ： <ul><li>如果想让所有属性都持续一个时间，那就写一个值。</li><li>如果想让每个属性持续不同的时间那就写一个时间的列表。</li></ul></li></ol></li></ul><h3 id="_12-3-transition-delay" tabindex="-1">12.3. transition-delay <a class="header-anchor" href="#_12-3-transition-delay" aria-label="Permalink to &quot;12.3. transition-delay&quot;">​</a></h3><p>作用：指定开始过渡的延迟时间，单位： <code>s</code> 或 <code>ms</code>。</p><h3 id="_12-4-transition-timing-function" tabindex="-1">12.4. transition-timing-function <a class="header-anchor" href="#_12-4-transition-timing-function" aria-label="Permalink to &quot;12.4. transition-timing-function&quot;">​</a></h3><ul><li>作用：设置过渡的类型</li><li>常用值： <ol><li><code>ease</code> ： 平滑过渡 —— 默认值</li><li><code>linear</code> ： 线性过渡</li><li><code>ease-in</code> ： 慢 → 快</li><li><code>ease-out</code> ： 快 → 慢</li><li><code>ease-in-out</code> ： 慢 → 快 → 慢</li><li><code>step-start</code> ： 不考虑过渡时间瞬间到达终点，等同于 <code>steps(1, start)</code></li><li><code>step-end</code> ： 过渡时间到了瞬间到达终点，等同于 <code>steps(1, end)</code></li><li><code>steps( integer,?)</code> ： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的 步数。第二个参数取值可以是 <code>start</code> 或 <code>end</code> ，指定每一步的值发生变化的时间点。第二个 参数默认值为 <code>end</code> 。</li><li><code>cubic-bezie ( number, number, number, number)</code>： 特定的贝塞尔曲线类型。</li></ol></li></ul><blockquote><p>在线制作贝赛尔曲线：<a href="https://cubic-bezier.com" target="_blank" rel="noreferrer">https://cubic-bezier.com</a></p></blockquote><h3 id="_12-5-transition-复合属性" tabindex="-1">12.5. transition 复合属性 <a class="header-anchor" href="#_12-5-transition-复合属性" aria-label="Permalink to &quot;12.5. transition 复合属性&quot;">​</a></h3><ul><li><p>如果设置了一个时间，表示 duration ；如果设置了两个时间，第一是 duration ，第二个是delay ；其他值没有顺序要求。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transition:1s 1s linear all;</span></span></code></pre></div></li></ul><h2 id="_13-动画" tabindex="-1">13. 动画 <a class="header-anchor" href="#_13-动画" aria-label="Permalink to &quot;13. 动画&quot;">​</a></h2><h3 id="_13-1-什么是帧" tabindex="-1">13.1. 什么是帧 <a class="header-anchor" href="#_13-1-什么是帧" aria-label="Permalink to &quot;13.1. 什么是帧&quot;">​</a></h3><ul><li>一段动画，就是一段时间内连续播放 <code>n</code> 个画面。每一张画面，我们管它叫做“帧”。一定时间内连续快速播放若干个帧，就成了人眼中所看到的动画。同样时间内，播放的帧数越多，画面看起来越流畅。</li></ul><h3 id="_13-2-什么是关键帧" tabindex="-1">13.2. 什么是关键帧 <a class="header-anchor" href="#_13-2-什么是关键帧" aria-label="Permalink to &quot;13.2. 什么是关键帧&quot;">​</a></h3><ul><li>关键帧指的是，在构成一段动画的若干帧中，起到决定性作用的 <code>2-3</code> 帧。</li></ul><p><img src="`+o+`" alt="image-20240420153156651" loading="lazy"></p><h3 id="_13-3-动画的基本使用" tabindex="-1">13.3. 动画的基本使用 <a class="header-anchor" href="#_13-3-动画的基本使用" aria-label="Permalink to &quot;13.3. 动画的基本使用&quot;">​</a></h3><ul><li><p>第一步：定义关键帧（定义动画）</p><ol><li><p>简单方式定义：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*写法一*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 动画名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*第一帧*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /*property2:value2*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*最后一帧*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>完整方式定义：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 动画名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    20%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    40%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    60%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    80%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    	/*property1:value1*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></li><li><p>第二步：给元素应用动画，用到的属性如下：</p><ol><li><p><code>animation-name</code> ：给元素指定具体的动画（具体的关键帧）</p></li><li><p><code>animation-duration</code> ：设置动画所需时间</p></li><li><p><code>animation-delay</code> ：设置动画延迟</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 指定动画 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: testKey;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 设置动画所需时间 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation-duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 设置动画延迟 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation-delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></li></ul><h3 id="_13-4-动画的其他属性" tabindex="-1">13.4. 动画的其他属性 <a class="header-anchor" href="#_13-4-动画的其他属性" aria-label="Permalink to &quot;13.4. 动画的其他属性&quot;">​</a></h3><ul><li><p><code>animation-timing-function</code> ，设置动画的类型，常用值如下：</p><blockquote><ol><li><code>ease</code> ： 平滑动画 —— 默认值</li><li><code>linear</code> ： 线性过渡</li><li><code>ease-in</code> ： 慢 → 快</li><li><code>ease-out</code> ： 快 → 慢</li><li><code>ease-in-out</code> ： 慢 → 快 → 慢</li><li><code>step-start</code> ： 等同于 <code>steps(1, start)</code></li><li><code>step-end</code> ： 等同于 <code>steps(1, end)</code></li><li><code>steps( integer,?)</code> ： 接受两个参数的步进函数。第一个参数必须为正整数，指定 函数的步数。第二个参数取值可以是 <code>start</code> 或 <code>end</code> ，指定每一步的值发生变化的时间 点。第二个参数默认值为 <code>end</code> 。</li><li><code>cubic-bezie ( number, number, number, number)</code>： 特定的贝塞尔曲线类型</li></ol></blockquote></li><li><p><code>animation-iteration-count</code> ，指定动画的播放次数，常用值如下：</p><blockquote><ol><li>number ：动画循环次数</li><li>infinite ： 无限循环</li></ol></blockquote></li><li><p><code>animation-direction</code> ，指定动画方向，常用值如下：</p><blockquote><ol><li><code>normal</code> ： 正常方向 (默认)</li><li><code>reverse</code> ： 反方向运行</li><li><code>alternate</code> ： 动画先正常运行再反方向运行，并持续交替运行</li><li><code>alternate-reverse</code> ： 动画先反运行再正方向运行，并持续交替运行</li></ol></blockquote></li><li><p><code>animation-fill-mode</code> ，设置动画之外的状态</p><blockquote><ol><li><code>forwards</code> ： 设置对象状态为动画结束时的状态</li><li><code>backwards</code> ： 设置对象状态为动画开始时的状态 (默认)</li></ol></blockquote></li><li><p><code>animation-play-state</code> ，设置动画的播放状态，常用值如下：</p><blockquote><ol><li><code>running</code> ： 运动 (默认)</li><li><code>paused</code> ： 暂停</li></ol></blockquote></li></ul><h3 id="_13-5-动画复合属性" tabindex="-1">13.5. 动画复合属性 <a class="header-anchor" href="#_13-5-动画复合属性" aria-label="Permalink to &quot;13.5. 动画复合属性&quot;">​</a></h3><p>只设置一个时间表示 <code>duration</code> ，设置两个时间分别是： <code>duration</code> 和 <code>delay</code> ，其他属性没有数量和顺序要求。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: yage </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> linear</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> alternate-reverse</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> forwards</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>备注： <code>animation-play-state</code> 一般单独使用。</p></blockquote><h2 id="_14-多列布局" tabindex="-1">14. 多列布局 <a class="header-anchor" href="#_14-多列布局" aria-label="Permalink to &quot;14. 多列布局&quot;">​</a></h2><p><img src="`+d+'" alt="image-20240420161444335" loading="lazy"></p><p>常用属性如下：</p><ul><li><code>column-count</code> ：指定列数，值是数字。</li><li><code>column-width</code> ：指定列宽，值是长度。</li><li><code>columns</code> ：同时指定列宽和列数，复合属性；值没有数量和顺序要求。</li><li><code>column-gap</code> ：设置列边距，值是长度。</li><li><code>column-rule-style</code> ：设置列与列之间边框的风格，值与 <code>border-style</code> 一致。</li><li><code>column-rule-width</code> ：设置列与列之间边框的宽度，值是长度。</li><li><code>column-rule-color</code> ：设置列与列之间边框的颜色。</li><li><code>coumn-rule</code> ：设置列边框，复合属性。</li><li><code>column-span</code> 指定是否跨列；值: <code>none</code> 、 <code>all</code> 。</li></ul><h2 id="_15-伸缩盒模型" tabindex="-1">15. 伸缩盒模型 <a class="header-anchor" href="#_15-伸缩盒模型" aria-label="Permalink to &quot;15. 伸缩盒模型&quot;">​</a></h2><h3 id="_15-1-伸缩盒模型简介" tabindex="-1">15.1. 伸缩盒模型简介 <a class="header-anchor" href="#_15-1-伸缩盒模型简介" aria-label="Permalink to &quot;15.1. 伸缩盒模型简介&quot;">​</a></h3><ul><li><code>2009</code> 年， W3C 提出了一种新的盒子模型 —— <code>Flexible Box</code> （伸缩盒模型，又称：弹性盒子）。</li><li>它可以轻松的控制：元素分布方式、元素对齐方式、元素视觉顺序 .......</li><li>截止目前，除了在部分 <code>IE</code> 浏览器不支持，其他浏览器均已全部支持。</li><li>伸缩盒模型的出现，逐渐演变出了一套新的布局方案 —— <code>flex</code> 布局。</li></ul><blockquote><p>小贴士：</p><ol><li>传统布局是指：基于传统盒状模型，主要靠： <code>display</code> 属性 + <code>position</code> 属性 + <code>float</code>属性。</li><li><code>flex</code> 布局目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上。</li></ol></blockquote><h3 id="_15-2-伸缩容器、伸缩项目" tabindex="-1">15.2. 伸缩容器、伸缩项目 <a class="header-anchor" href="#_15-2-伸缩容器、伸缩项目" aria-label="Permalink to &quot;15.2. 伸缩容器、伸缩项目&quot;">​</a></h3><ul><li><p>伸缩容器： 开启了 <code>flex</code> 的元素，就是：伸缩容器。</p><blockquote><ol><li>给元素设置： <code>display:flex</code> 或 <code>display:inline-flex</code> ，该元素就变为了伸缩容器。</li><li><code>display:inline-flex</code> 很少使用，因为可以给多个伸缩容器的父容器，也设置为伸缩容器。</li><li>一个元素可以同时是：伸缩容器、伸缩项目。</li></ol></blockquote></li><li><p>伸缩项目：伸缩容器所有 <span style="color:red;font-weight:700;">子元素</span> 自动成为了：伸缩项目。</p><blockquote><ol><li>仅伸缩容器的<span style="color:red;font-weight:700;">子元素</span>成为了伸缩项目，孙子元素、重孙子元素等后代，不是伸缩项目。</li><li>无论原来是哪种元素（块、行内块、行内），一旦成为了伸缩项目，全都会“<strong>块状化</strong>”。</li></ol></blockquote></li></ul><h3 id="_15-3-主轴与侧轴" tabindex="-1">15.3. 主轴与侧轴 <a class="header-anchor" href="#_15-3-主轴与侧轴" aria-label="Permalink to &quot;15.3. 主轴与侧轴&quot;">​</a></h3><ul><li>主轴： 伸缩项目沿着主轴排列，主轴默认是水平的，默认方向是：从左到右（左边是起点，右边是终点）。</li><li>侧轴： 与主轴垂直的就是侧轴，侧轴默认是垂直的，默认方向是：从上到下（上边是起点，下边是终点）。</li></ul><h3 id="_15-4-主轴方向" tabindex="-1">15.4. 主轴方向 <a class="header-anchor" href="#_15-4-主轴方向" aria-label="Permalink to &quot;15.4. 主轴方向&quot;">​</a></h3><ul><li>属性名： <code>flex-direction</code></li><li>常用值如下： <ol><li><code>row</code> ：主轴方向水平从左到右 —— 默认值</li><li><code>row-reverse</code> ：主轴方向水平从右到左。</li><li><code>column</code> ：主轴方向垂直从上到下。</li><li><code>column-reverse</code> ：主轴方向垂直从下到上。</li></ol></li></ul><p><img src="'+n+'" alt="image-20240420163935557" loading="lazy"></p><blockquote><p>注意：改变了主轴的方向，侧轴方向也随之改变。</p></blockquote><h3 id="_15-5-主轴换行方式" tabindex="-1">15.5. 主轴换行方式 <a class="header-anchor" href="#_15-5-主轴换行方式" aria-label="Permalink to &quot;15.5. 主轴换行方式&quot;">​</a></h3><ul><li>属性名： <code>flex-wrap</code></li><li>常用值如下： <ol><li><code>nowrap</code> ：默认值，不换行。 <img src="'+h+'" alt="image-20240420165337212" loading="lazy"></li><li><code>wrap</code> ：自动换行，伸缩容器不够自动换行。 <img src="'+p+'" alt="image-20240420165355765" loading="lazy"></li><li><code>wrap-reverse</code> ：反向换行。 <img src="'+c+'" alt="image-20240420165410057" loading="lazy"></li></ol></li></ul><h3 id="_15-6-flex-flow" tabindex="-1">15.6. flex-flow <a class="header-anchor" href="#_15-6-flex-flow" aria-label="Permalink to &quot;15.6. flex-flow&quot;">​</a></h3><ul><li><p><code>flex-flow</code> 是一个复合属性，复合了 <code>flex-direction</code> 和 <code>flex-wrap</code> 两个属性。 值没有顺序要 求。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: row wrap;</span></span></code></pre></div></li></ul><h3 id="_15-7-主轴对齐方式" tabindex="-1">15.7. 主轴对齐方式 <a class="header-anchor" href="#_15-7-主轴对齐方式" aria-label="Permalink to &quot;15.7. 主轴对齐方式&quot;">​</a></h3><ul><li>属性名： <code>justify-content</code></li><li>常用值如下： <ol><li><code>flex-start</code> ：主轴起点对齐。—— 默认值</li><li><code>flex-end</code> ：主轴终点对齐。</li><li><code>center</code> ：居中对齐</li><li><code>space-between</code> ：均匀分布，两端对齐（最常用）。</li><li><code>space-around</code> ：均匀分布，两端距离是中间距离的一半。</li><li><code>space-evenly</code> ：均匀分布，两端距离与中间距离一致。</li></ol></li></ul><p><img src="'+r+'" alt="image-20240420165848768" loading="lazy"></p><h3 id="_15-8-侧轴对齐方式" tabindex="-1">15.8. 侧轴对齐方式 <a class="header-anchor" href="#_15-8-侧轴对齐方式" aria-label="Permalink to &quot;15.8. 侧轴对齐方式&quot;">​</a></h3><h4 id="_1-一行的情况" tabindex="-1">1. 一行的情况 <a class="header-anchor" href="#_1-一行的情况" aria-label="Permalink to &quot;1. 一行的情况&quot;">​</a></h4><ul><li>所需属性： <code>align-items</code></li><li>常用值如下： <ol><li><code>flex-start</code> ：侧轴的起点对齐。</li><li><code>flex-end</code> ：侧轴的终点对齐。</li><li><code>center</code> ：侧轴的中点对齐。</li><li><code>baseline</code> : 伸缩项目的第一行文字的基线对齐。</li><li><code>stretch</code> ：如果伸缩项目未设置高度，将占满整个容器的高度。—— （默认值）</li></ol></li></ul><p><img src="'+k+'" alt="image-20240420170330037" loading="lazy"></p><h4 id="_2-多行的情况" tabindex="-1">2. 多行的情况 <a class="header-anchor" href="#_2-多行的情况" aria-label="Permalink to &quot;2. 多行的情况&quot;">​</a></h4><ul><li>所需属性： <code>align-content</code></li><li>常用值如下： <ol><li><code>flex-start</code> ：与侧轴的起点对齐。</li><li><code>flex-end</code> ：与侧轴的终点对齐。</li><li><code>center</code> ：与侧轴的中点对齐。</li><li><code>space-between</code> ：与侧轴两端对齐，中间平均分布。</li><li><code>space-around</code> ：伸缩项目间的距离相等，比距边缘大一倍。</li><li><code>space-evenly</code> : 在侧轴上完全平分。</li><li><code>stretch</code> ：占满整个侧轴。—— 默认值</li></ol></li></ul><p><img src="'+g+`" alt="image-20240420171203063" loading="lazy"></p><h3 id="_15-9-flex-实现水平垂直居中" tabindex="-1">15.9.flex 实现水平垂直居中 <a class="header-anchor" href="#_15-9-flex-实现水平垂直居中" aria-label="Permalink to &quot;15.9.flex 实现水平垂直居中&quot;">​</a></h3><p>方法一：父容器开启 <code>flex</code> 布局，随后使用 <code>justify-content</code> 和 <code>align-items</code> 实现水平垂直居中</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">orange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>方法二：父容器开启 <code>flex</code> 布局，随后子元素 <code>margin: auto</code></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">orange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_15-10-伸缩性" tabindex="-1">15.10. 伸缩性 <a class="header-anchor" href="#_15-10-伸缩性" aria-label="Permalink to &quot;15.10. 伸缩性&quot;">​</a></h3><h4 id="_1-flex-basis" tabindex="-1">1. flex-basis <a class="header-anchor" href="#_1-flex-basis" aria-label="Permalink to &quot;1. flex-basis&quot;">​</a></h4><ul><li><p>概念： <code>flex-basis</code> 设置的是主轴方向的 <strong>基准长度</strong>，会让宽度或高度失效。</p><blockquote><p>备注：主轴横向：宽度失效；主轴纵向：高度失效</p></blockquote></li><li><p>作用：浏览器根据这个属性设置的值，计算主轴上是否有多余空间，默认值 <code>auto</code> ，即：伸缩项目的宽或高。</p></li></ul><h4 id="_2-flex-grow-伸" tabindex="-1">2. flex-grow（伸） <a class="header-anchor" href="#_2-flex-grow-伸" aria-label="Permalink to &quot;2. flex-grow（伸）&quot;">​</a></h4><ul><li>概念： <code>flex-grow</code> 定义伸缩项目的放大比例，默认为 <code>0</code> ，即：纵使主轴存在剩余空间，也不拉伸（放大）。</li><li>规则： <ol><li>若所有伸缩项目的 <code>flex-grow</code> 值都为 <code>1</code> ，则：它们将等分剩余空间（如果有空间的话）。</li><li>若三个伸缩项目的 <code>flex-grow</code> 值分别为： <code>1</code> 、 <code>2</code> 、 <code>3</code> ，则：分别瓜分到： <code>1/6</code> 、 <code>2/6</code> 、<code>3/6</code> 的空间。</li></ol></li></ul><h4 id="_3-flex-shrink-缩" tabindex="-1">3. flex-shrink（缩） <a class="header-anchor" href="#_3-flex-shrink-缩" aria-label="Permalink to &quot;3. flex-shrink（缩）&quot;">​</a></h4><ul><li><p>概念： <code>flex-shrink</code> 定义了项目的压缩比例，默认为 <code>1</code> ，即：如果空间不足，该项目将会缩小。</p></li><li><p>收缩项目的计算，略微复杂一点，我们拿一个场景举例：</p><blockquote><p>三个收缩项目，宽度分别为： <code>200px</code> 、 <code>300px</code> 、 <code>200px</code> ，它们的 <code>flex-shrink</code> 值分别 为： <code>1</code> 、 <code>2</code> 、 <code>3</code> 若想刚好容纳下三个项目，需要总宽度为 <code>700px</code> ，但目前容器只有 <code>400px</code> ，还差 <code>300px</code> 所以每个人都要收缩一下才可以放下，具体收缩的值，这样计算：</p><ol><li>计算分母： <code>(200×1) + (300×2) + (200×3) = 1400</code></li><li>计算比例：</li></ol><ul><li>项目一： <code>(200×1) / 1400 = 比例值1</code></li><li>项目二： <code>(300×2) / 1400 = 比例值2</code></li><li>项目三：<code> (200×3) / 1400 = 比例值3</code></li></ul><ol start="3"><li>计算最终收缩大小：</li></ol><ul><li>项目一需要收缩： <code>比例值1 × 300</code></li><li>项目二需要收缩： <code>比例值2 × 300</code></li><li>项目三需要收缩： <code>比例值3 × 300</code></li></ul></blockquote></li></ul><h3 id="_15-11-flex复合属性" tabindex="-1">15.11. flex复合属性 <a class="header-anchor" href="#_15-11-flex复合属性" aria-label="Permalink to &quot;15.11. flex复合属性&quot;">​</a></h3><p><code>flex</code> 是复合属性，复合了： <code>flex-grow</code> 、 <code>flex-shrink</code> 、 <code>flex-basis</code> 三个属性，默认值为 <code>0 1 auto</code> 。</p><ul><li>如果写 <code>flex:1 1 auto</code> ，则可简写为： <code>flex:auto</code></li><li>如果写 <code>flex:1 1 0</code> ，则可简写为： <code>flex:1</code></li><li>如果写 <code>flex:0 0 auto</code> ，则可简写为： <code>flex:none</code></li><li>如果写 <code>flex:0 1 auto</code> ，则可简写为： <code>flex:0 auto</code> —— 即 <code>flex</code> 初始值。</li></ul><h3 id="_15-12-项目排序" tabindex="-1">15.12. 项目排序 <a class="header-anchor" href="#_15-12-项目排序" aria-label="Permalink to &quot;15.12. 项目排序&quot;">​</a></h3><ul><li><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 <code>0</code> 。</li></ul><h3 id="_15-13-单独对齐" tabindex="-1">15.13. 单独对齐 <a class="header-anchor" href="#_15-13-单独对齐" aria-label="Permalink to &quot;15.13. 单独对齐&quot;">​</a></h3><ul><li>通过 <code>align-self</code> 属性，可以单独调整某个伸缩项目的对齐方式</li><li>默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性。</li></ul><h2 id="_16-响应式布局" tabindex="-1">16. 响应式布局 <a class="header-anchor" href="#_16-响应式布局" aria-label="Permalink to &quot;16. 响应式布局&quot;">​</a></h2><h3 id="_16-1-媒体查询" tabindex="-1">16.1 媒体查询 <a class="header-anchor" href="#_16-1-媒体查询" aria-label="Permalink to &quot;16.1 媒体查询&quot;">​</a></h3><h4 id="_1-媒体类型" tabindex="-1">1. 媒体类型 <a class="header-anchor" href="#_1-媒体类型" aria-label="Permalink to &quot;1. 媒体类型&quot;">​</a></h4><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>all</code></td><td>检测所有设备。</td></tr><tr><td><code>screen </code></td><td>检测电子屏幕，包括：电脑屏幕、平板屏幕、手机屏幕等。</td></tr><tr><td><code>print</code></td><td>检测打印机。</td></tr><tr><td><span style="color:grey;font-weight:700;">aural</span></td><td><span style="color:grey;font-weight:700;">已废弃，用于语音和声音合成器。</span></td></tr><tr><td><span style="color:grey;font-weight:700;">braille</span></td><td><span style="color:grey;font-weight:700;">已废弃，应用于盲文触摸式反馈设备</span></td></tr><tr><td><span style="color:grey;font-weight:700;">embossed </span></td><td><span style="color:grey;font-weight:700;">已废弃， 用于打印的盲人印刷设备。</span></td></tr><tr><td><span style="color:grey;font-weight:700;">handheld </span></td><td><span style="color:grey;font-weight:700;">已废弃， 用于掌上设备或更小的装置，如PDA和小型电话。</span></td></tr><tr><td><span style="color:grey;font-weight:700;">projection</span></td><td><span style="color:grey;font-weight:700;">已废弃， 用于投影设备。</span></td></tr><tr><td><span style="color:grey;font-weight:700;">tty </span></td><td><span style="color:grey;font-weight:700;">已废弃， 用于固定的字符网格，如电报、终端设备和对字符有限制的便携设备。</span></td></tr><tr><td><span style="color:grey;font-weight:700;">tv</span></td><td><span style="color:grey;font-weight:700;">已废弃， 用于电视和网络电视。</span></td></tr></tbody></table><blockquote><p>完整列表请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a></p></blockquote><h4 id="_2-媒体特性" tabindex="-1">2 媒体特性 <a class="header-anchor" href="#_2-媒体特性" aria-label="Permalink to &quot;2 媒体特性&quot;">​</a></h4><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>width</code></td><td>检测视口 <strong>宽度。</strong></td></tr><tr><td><code>max-width</code></td><td>检测视口 <strong>最大宽度。</strong></td></tr><tr><td><code>min-width</code></td><td>检测视口 <strong>最小宽度。</strong></td></tr><tr><td><code>height</code></td><td>检测视口 <strong>高度。</strong></td></tr><tr><td><code>max-height</code></td><td>检测视口 <strong>最大高度。</strong></td></tr><tr><td><code>min-height</code></td><td>检测视口 <strong>最小高度。</strong></td></tr><tr><td><code>device-width</code></td><td>检测设备 <strong>屏幕的宽度。</strong></td></tr><tr><td><code>max-device-width</code></td><td>检测设备 <strong>屏幕的最大宽度。</strong></td></tr><tr><td><code>min-device-width</code></td><td>检测设备 <strong>屏幕的最小宽度。</strong></td></tr><tr><td><code>orientation</code></td><td>检测 <strong>视口的旋转方向</strong>（是否横屏）<br>1. <code>portrait</code>：视口处于纵向，即高度大于等于宽度。<br>2. <code>landscape</code>：视口处于横向，即宽度大于高度。</td></tr></tbody></table><blockquote><p>完整列表请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a></p></blockquote><h4 id="_3-运算符" tabindex="-1">3 运算符 <a class="header-anchor" href="#_3-运算符" aria-label="Permalink to &quot;3 运算符&quot;">​</a></h4><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>and</code></td><td>并且</td></tr><tr><td><code>,</code> 或 <code>or</code></td><td>或</td></tr><tr><td><code>not</code></td><td>否定</td></tr><tr><td><code>only</code></td><td>肯定</td></tr></tbody></table><h4 id="_4-常用阈值" tabindex="-1">4 常用阈值 <a class="header-anchor" href="#_4-常用阈值" aria-label="Permalink to &quot;4 常用阈值&quot;">​</a></h4><p>在实际开发中，会将屏幕划分成几个区间，例如：</p><p><img src="`+E+`" alt="image-20240421000431363" loading="lazy"></p><h4 id="_5-结合外部样式的用法" tabindex="-1">5 结合外部样式的用法 <a class="header-anchor" href="#_5-结合外部样式的用法" aria-label="Permalink to &quot;5 结合外部样式的用法&quot;">​</a></h4><p><strong>用法一：</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel=&quot;stylesheet&quot; media=&quot;具体的媒体查询&quot; href=&quot;mystylesheet.css&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><strong>用法二：</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">768</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*CSS-Code;*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">768</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*CSS-Code;*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_17-bfc" tabindex="-1">17. BFC <a class="header-anchor" href="#_17-bfc" aria-label="Permalink to &quot;17. BFC&quot;">​</a></h2><h3 id="_17-1-什么是bfc" tabindex="-1">17.1. 什么是BFC <a class="header-anchor" href="#_17-1-什么是bfc" aria-label="Permalink to &quot;17.1. 什么是BFC&quot;">​</a></h3><ul><li><p><code>W3C</code> 上对 <code>BFC</code> 的定义：</p><blockquote><p>原文：Floats, absolutely positioned elements, block containers (such as inline-blocks, tablecells, and table-captions) that are not block boxes, and block boxes with &#39;overflow&#39; other than&#39;visible&#39; (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p><hr><p>译文：浮动、绝对定位元素、不是块盒子的块容器（如 <code>inline-blocks</code> 、 <code>table-cells</code> 和 <code>table-captions</code> ），以及 <code>overflow</code> 属性的值除 <code>visible</code> 以外的块盒，将为其内容建立新 的块格式化上下文。</p></blockquote></li><li><p><code>MDN</code> 上对 <code>BFC</code> 的描述：</p><blockquote><p><strong>块格式化上下文</strong>（Block Formatting Context，BFC） 是 <code>Web</code> 页面的可视 <code>CSS</code> 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p></blockquote></li><li><p>更加通俗的描述：</p><blockquote><ol><li><code>BFC</code> 是 <code>Block Formatting Context</code> （<strong>块级格式上下文</strong>），可以理解成元素的一个<span style="color:red;font-weight:700;">“特异功能”</span>。</li><li>该 <span style="color:red;font-weight:700;">“特异功能”</span>，在默认的情况下处于关闭状态；当元素满足了某些条件后，该“特异功能”被激活。</li><li>所谓激活<span style="color:red;font-weight:700;">“特异功能”</span>，专业点说就是：该元素创建了 <code>BFC</code> （又称：开启了 <code>BFC </code>）。</li></ol></blockquote></li></ul><h3 id="_17-2-开启了bfc能解决什么问题" tabindex="-1">17.2. 开启了BFC能解决什么问题 <a class="header-anchor" href="#_17-2-开启了bfc能解决什么问题" aria-label="Permalink to &quot;17.2. 开启了BFC能解决什么问题&quot;">​</a></h3><ol><li>元素开启 <code>BFC</code> 后，其子元素不会再产生 <code>margin</code> 塌陷问题。</li><li>元素开启 <code>BFC</code> 后，自己不会被其他浮动元素所覆盖。</li><li>元素开启 <code>BFC</code> 后，就算其子元素浮动，元素自身高度也不会塌陷。</li></ol><h3 id="_17-3-如何开启bfc" tabindex="-1">17.3. 如何开启BFC <a class="header-anchor" href="#_17-3-如何开启bfc" aria-label="Permalink to &quot;17.3. 如何开启BFC&quot;">​</a></h3><ul><li>根元素</li><li>浮动元素</li><li>绝对定位、固定定位的元素</li><li>行内块元素</li><li>表格单元格： <code>table</code> 、 <code>thead</code> 、 <code>tbody</code> 、 <code>tfoot</code> 、 <code>th</code> 、 <code>td</code> 、 <code>tr</code> 、 <code>caption</code></li><li><code>overflow</code> 的值不为 <code>visible</code> 的块元素</li><li>伸缩项目</li><li>多列容器</li><li><code>column-span</code> 为 <code>all</code> 的元素（即使该元素没有包裹在多列容器中）</li><li><code>display</code> 的值，设置为 <code>flow-root</code></li></ul>`,222),y=[b];function m(C,f,x,F,v,q){return a(),s("div",null,y)}const w=i(u,[["render",m]]);export{D as __pageData,w as default};
