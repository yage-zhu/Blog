import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.7ep0oyv4.js";const n="/assets/83vf5qwKXGldCiA.BO0X1Aiw.png",p="/assets/3YOl5KGX1FejMLs.B9lyeck1.png",h="/assets/z8qYjEkna1vbUoZ.oriP0qBu.png",l="/assets/UzvFEVurWYaKIy6.Z1_wxLb7.png",e="/assets/QGnMtirYoEF4CHq.BRUvIZ3a.png",k="/assets/isjSO1oT4m5PeIZ.CdIZ3SFT.png",r="/assets/xwKEC3crnyvspae.BcWMfj15.png",o="/assets/EgNvd4UzPtWr7pJ.cDLsvg4B.png",d="/assets/d7ZqlSHvfMeih9U.Cdu6_DoV.png",g="/assets/Wj6gifxqh4cuy5R.DK7LK5w5.png",y="/assets/FfXp2LYDMgxAnBZ.CiciT2Wk.png",c="/assets/ehQaKwydBr93noR.Bx4OxfRf.png",E="/assets/GJqgXnRbrlNw1Ei.DlaHCEko.png",F="/assets/Jg2LNi8TQ1CsGDZ.LVMUatF4.png",C="/assets/X3TqDIfvrynPHJC.DkqpV8Qf.png",u="/assets/Tt9LpOcA8JlvjaP.zU_BTdUn.png",m="/assets/NbvFaY5nPpVuMX4.BrKT-N-9.png",b="/assets/wTpMru9KDq2g7Ui.BcGxTJD3.png",P="/assets/fwdmNHXaRY1skZD.BXKXuzTd.png",B="/assets/UBrY8HFbd9tDSQp.CmEPB2hi.png",_="/assets/JCYZXp3SH4i5Gby.BSV771OW.png",v="/assets/PxnK3wTe8aMEULD.C6Q-aze1.png",q="/assets/nLqPiACvK1tIeZw.BhyUWGzO.png",f="/assets/SE4WbdPTsVmgFo5.BjDKevXV.png",D="/assets/KHU9blBv7cgji2w.Cd86GoEd.png",x="/assets/9KrojhCVGpdB5LY.BcCDoYTP.png",A="/assets/fdwJyaVlZ3oBgGu.CGYWdGeY.png",z="/assets/3PfutKZ1Ui8NQWd.6wFgngU2.png",w="/assets/rfkzDucL8UXCjPx._8EqYOkr.png",T="/assets/Jorz5mNv3jLTD7y.BfaBgIiM.png",S="/assets/1S5UfIgrybuA6K4.DeGlzCqI.png",W="/assets/rPSTxVO1tdFphMJ.Cz0Kg9uu.png",U="/assets/ckN763yUfVGY92R.C5MGatQu.png",G="/assets/67imkYwP3an5t8N.Dinj0W6p.png",N="/assets/rm8lqBAUp5KNSVh.CkZN9ktv.png",K="/assets/UYJyNwjAfBIra7W.hqr8pl44.png",Y="/assets/nit5cfFCZB3PDQL.brJAWgTK.png",H="/assets/csaQuhGCw2zBVkl.BEZBOP6h.png",I="/assets/URmHZNhkgSYAwbz.BeiKJpUD.png",J="/assets/buTov5pl1GD7WHP.A9uwJ79N.png",Z="/assets/n8Gd6LiAPTMzh4j.XqUGlUYn.png",j="/assets/9ZKGeAmclNWpwMD.BYPeImFn.png",V="/assets/kBgwtrEA1XWxvj9.Dacr1R3E.png",ns=JSON.parse('{"title":"Python环境搭建与输入输出","description":"","frontmatter":{},"headers":[],"relativePath":"python/1.md","filePath":"python/1.md"}'),L={name:"python/1.md"},X=t('<h1 id="python环境搭建与输入输出" tabindex="-1">Python环境搭建与输入输出 <a class="header-anchor" href="#python环境搭建与输入输出" aria-label="Permalink to &quot;Python环境搭建与输入输出&quot;">​</a></h1><h2 id="一、python概述" tabindex="-1">一、Python概述 <a class="header-anchor" href="#一、python概述" aria-label="Permalink to &quot;一、Python概述&quot;">​</a></h2><h3 id="_1、计算机资源" tabindex="-1">1、计算机资源 <a class="header-anchor" href="#_1、计算机资源" aria-label="Permalink to &quot;1、计算机资源&quot;">​</a></h3><p>在开发领域，计算机资源可以分为两部分：软件资源 + 硬件资源</p><p><strong>软件资源：看得见，摸不着</strong></p><p><strong>硬件资源：看得见，摸得着</strong></p><p>硬件资源（CPU、内存、硬盘、风扇、电源、键盘、鼠标...）</p><p>软件资源（Office办公软件、网易云音乐、各种各样的计算机游戏）</p><p>思考：我们发现，软硬件之间其实是可以交互的，这是什么原理呢？</p><p>答：使用操作系统，<strong>操作系统</strong> 是计算机软硬件之间的桥梁</p><h3 id="_2、操作系统分类" tabindex="-1">2、操作系统分类 <a class="header-anchor" href="#_2、操作系统分类" aria-label="Permalink to &quot;2、操作系统分类&quot;">​</a></h3><p>在日常的应用中，操作系统大概可以分为三大类：</p><p>① Windows操作系统</p><p>② MacOS操作系统</p><p>③ Linux操作系统（服务器端使用量最大的操作系统）</p><h3 id="_3、为什么要学习python" tabindex="-1">3、为什么要学习Python <a class="header-anchor" href="#_3、为什么要学习python" aria-label="Permalink to &quot;3、为什么要学习Python&quot;">​</a></h3><p>① 技术趋势</p><p>Python自带明星属性，热度稳居编程语言界前三</p><p><img src="'+n+'" alt="image-20210306090039676" loading="lazy"></p><p><strong>② 简单易学</strong></p><p>开发代码少，精确表达需求逻辑；<strong>33个关键字，7种基本数据类型</strong>；语法规则简单，接近自然语。</p><p><img src="'+p+'" alt="image-20210306090337310" loading="lazy"></p><p><strong>③ 应用广泛</strong></p><p>Python语言涉及IT行业70%以上的技术领域</p><p><img src="'+h+'" alt="image-20210306090727147" loading="lazy"></p><h3 id="_4、python语言的缺点" tabindex="-1">4、Python语言的缺点 <a class="header-anchor" href="#_4、python语言的缺点" aria-label="Permalink to &quot;4、Python语言的缺点&quot;">​</a></h3><p>① Python其运行速度相对于C/C++/Java要略慢一些</p><p>② Python由于语言的特性，无法对代码进行加密</p><p>③ Python的版本之间，兼容性不太理想（Python2和Python3）</p><h3 id="_5、python语言介绍" tabindex="-1">5、Python语言介绍 <a class="header-anchor" href="#_5、python语言介绍" aria-label="Permalink to &quot;5、Python语言介绍&quot;">​</a></h3><p>Python是一种<strong>跨平台</strong>的计算机程序设计语⾔。 是一个高层次的结合了<strong>解释性、编译性、互动性和面向对象</strong>的脚本语⾔。最初被设计用于编写自动化脚本Shell（适用于Linux操作系统），随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p><p>其实目前很多知名的机器学习、⼈⼯智能以及深度学习框架也都是基于Python语⾔进⾏开发的：</p><p>Google开源机器学习框架：TensorFlow</p><p>开源社区主推学习框架：Scikit-learn</p><p>百度开源深度学习框架：Paddle</p><h3 id="_6、python2-x和python3-x版本的区别" tabindex="-1">6、Python2.x和Python3.x版本的区别 <a class="header-anchor" href="#_6、python2-x和python3-x版本的区别" aria-label="Permalink to &quot;6、Python2.x和Python3.x版本的区别&quot;">​</a></h3><p>在目前的Python领域，其主要应用版本有两个：Python2和Python3</p><p><img src="'+l+'" alt="image-20210306091509401" loading="lazy"></p><blockquote><p>讲个编码的小故事：早期所有的编程语言，其编码格式默认都是ASCl,可以表述256个字符。为了兼容汉字，引入了新的编码格式GB2312 =&gt; GBK，中国台湾Big5。最终一些国际标准化组织机构把编码进行了统一：Unicode（UTF-8）。</p></blockquote><p>主要区别可以理解为：<strong>输入、输出以及编码格式的不同</strong></p><p>Python2.x</p><p>Python3.x</p><p>Python3.6、<strong>Python3.7</strong>、Python3.8、Python3.9...</p><p>在生产环境中，我们⼀般不会选择最新版本的Python，因为可能会存在未知Bug，所以⼀般强烈建议大家在选择软件版本时，向前推1 ~ 2个版本。所以咱们课程主要讲解Python3.7版本。</p><h2 id="二、python解析器" tabindex="-1">二、Python解析器 <a class="header-anchor" href="#二、python解析器" aria-label="Permalink to &quot;二、Python解析器&quot;">​</a></h2><h3 id="_1、python解析器的作用" tabindex="-1">1、Python解析器的作用 <a class="header-anchor" href="#_1、python解析器的作用" aria-label="Permalink to &quot;1、Python解析器的作用&quot;">​</a></h3><p>demo.py</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>由于Python属于高级语言，其并不能直接在计算机中运行，因为缺少Python语言的运行环境：Python解析器</p><p><img src="'+e+'" alt="image-20210306092814499" loading="lazy"></p><p>Python解析器的作用：就是把Python代码转换为计算机底层可以识别的机器语言，如0101...</p><h3 id="_2、python解析器的种类" tabindex="-1">2、Python解析器的种类 <a class="header-anchor" href="#_2、python解析器的种类" aria-label="Permalink to &quot;2、Python解析器的种类&quot;">​</a></h3><p><strong>① CPython，C语言开发的解释器[官方]，应⽤广泛的解释器。</strong></p><p>② IPython，基于CPython的一种交互式解释器。</p><p>③ 其他解释器</p><p>PyPy，基于Python语言开发的解释器。</p><p>JPython，运⾏在Java平台的解释器，直接把Python代码编译成Java字节码执⾏。</p><p>IronPython，运⾏在微软.Net平台上的Python解释器，可直接把Python代码编译成.Net的字节码。</p><h3 id="_3、下载python解析器" tabindex="-1">3、下载Python解析器 <a class="header-anchor" href="#_3、下载python解析器" aria-label="Permalink to &quot;3、下载Python解析器&quot;">​</a></h3><p>下载地址：<a href="https://www.python.org/downloads/release/python-379/" target="_blank" rel="noreferrer">https://www.python.org/downloads/release/python-379/</a></p><p>[单击上述链接] -- 查找目标文件：Windows x86-64 executable installer -- 单</p><p>击即可下载。</p><p><img src="'+k+'" alt="image-20210306093337458" loading="lazy"></p><h3 id="_4、python解析器的安装" tabindex="-1">4、Python解析器的安装 <a class="header-anchor" href="#_4、python解析器的安装" aria-label="Permalink to &quot;4、Python解析器的安装&quot;">​</a></h3><p>第一步：双击运行Python的解析器，选择<strong>自定义安装</strong>以及<strong>添加Python到环境变量</strong></p><p><img src="'+r+'" alt="image-20210306095227329" loading="lazy"></p><p>第二步：选择所有要安装的功能菜单，默认全部勾选</p><p><img src="'+o+'" alt="image-20210306095439595" loading="lazy"></p><blockquote><p>pip：Python的包管理工具，可以用来安装未来我们项目中需要使用的各种模块</p></blockquote><p>第三步：设置Python解析器的安装路径，强烈建议安装在除C盘以外的盘符</p><p><img src="'+d+'" alt="image-20210306095909408" loading="lazy"></p><p>第四步：测试Python解析器是否可以使用</p><p>按Windows + R，输入cmd字符，打开Windows的DOS窗口，输入python（全部小写），如下图所示：</p><p><img src="'+g+'" alt="image-20210306100236471" loading="lazy"></p><p>出现了以上界面，就代表Python3.7的解析器已经安装成功了。如何从这个窗口中退出到DOS模式呢？</p><p>答：使用exit()方法</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 回车</span></span></code></pre></div><h2 id="三、python开发工具pycharm" tabindex="-1">三、Python开发工具PyCharm <a class="header-anchor" href="#三、python开发工具pycharm" aria-label="Permalink to &quot;三、Python开发工具PyCharm&quot;">​</a></h2><h3 id="_1、为什么要安装pycharm" tabindex="-1">1、为什么要安装PyCharm <a class="header-anchor" href="#_1、为什么要安装pycharm" aria-label="Permalink to &quot;1、为什么要安装PyCharm&quot;">​</a></h3><p>工欲善其事必先利其器</p><p>在Python的开发领域，其开发工具非常非常多，EditPlus、Notepad++、Sublime Text3、Visual Studio Code、PyCharm（目前功能最强大的IDE）</p><p><img src="'+y+'" alt="image-20210306102520443" loading="lazy"></p><h3 id="_2、pycharm的主要作用" tabindex="-1">2、PyCharm的主要作用 <a class="header-anchor" href="#_2、pycharm的主要作用" aria-label="Permalink to &quot;2、PyCharm的主要作用&quot;">​</a></h3><p>PyCharm是⼀种Python IDE （集成开发环境），带有一整套可以帮助用户在使用Python语言开发时提高其效率的⼯具，内部集成的功能如下：</p><p>Project管理</p><p>智能提示</p><p>语法高亮</p><p>代码跳转</p><p>调试代码</p><p>解释代码(解释器)</p><p>框架和库</p><p>......</p><h3 id="_3、pycharm的分类" tabindex="-1">3、PyCharm的分类 <a class="header-anchor" href="#_3、pycharm的分类" aria-label="Permalink to &quot;3、PyCharm的分类&quot;">​</a></h3><p>PyCharm一共有两个版本：专业版（收费） 与 社区版（免费、开源）</p><p><img src="'+c+'" alt="image-20210306102803654" loading="lazy"></p><p>在基础班，PyCharm社区版足够我们使用，绰绰有余。</p><h3 id="_4、下载pycharm" tabindex="-1">4、下载PyCharm <a class="header-anchor" href="#_4、下载pycharm" aria-label="Permalink to &quot;4、下载PyCharm&quot;">​</a></h3><p>下载地址：<strong><a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noreferrer">https://www.jetbrains.com/pycharm/download/#section=windows</a></strong></p><p><img src="'+E+'" alt="image-20210306103210207" loading="lazy"></p><h3 id="_5、pycharm安装" tabindex="-1">5、PyCharm安装 <a class="header-anchor" href="#_5、pycharm安装" aria-label="Permalink to &quot;5、PyCharm安装&quot;">​</a></h3><p>第一步：双击PyCharm软件安装包，进行软件安装</p><p><img src="'+F+'" alt="image-20210306104505660" loading="lazy"></p><p>第二步：设置软件的安装路径，理论上没有任何要求，但是建议放在除C盘以外的盘符</p><p><img src="'+C+'" alt="image-20210306105046370" loading="lazy"></p><p>第三步：PyCharm基本设置，创建桌面图标与.py文件关联</p><p><img src="'+u+'" alt="image-20210306105223088" loading="lazy"></p><h3 id="_6、pycharm软件的使用" tabindex="-1">6、PyCharm软件的使用 <a class="header-anchor" href="#_6、pycharm软件的使用" aria-label="Permalink to &quot;6、PyCharm软件的使用&quot;">​</a></h3><h4 id="☆-创建python项目" tabindex="-1">☆ 创建Python项目 <a class="header-anchor" href="#☆-创建python项目" aria-label="Permalink to &quot;☆ 创建Python项目&quot;">​</a></h4><p>什么是项目？其实我们在实际开发中，每次参与一个工作的开发都是一个项目的开发过程。所以使用PyCharm的第一件事就是学习Python项目的创建过程。</p><p>第一步：创建项目</p><p><img src="'+m+'" alt="image-20210306110324245" loading="lazy"></p><p>第二步：设置项目路径，必须放在C盘以外的盘符（非常重要！！！）</p><p><img src="'+b+'" alt="image-20210306110916916" loading="lazy"></p><p>配置完成后，单机Create创建Python项目。</p><h4 id="☆-新建文件与代码书写" tabindex="-1">☆ 新建文件与代码书写 <a class="header-anchor" href="#☆-新建文件与代码书写" aria-label="Permalink to &quot;☆ 新建文件与代码书写&quot;">​</a></h4><p><img src="'+P+'" alt="image-20210306111656942" loading="lazy"></p><blockquote><p>如果将来要上传到服务器的文件，那么文件名切记不能使用中文。</p></blockquote><p>编写Hello World</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="☆-运行代码" tabindex="-1">☆ 运行代码 <a class="header-anchor" href="#☆-运行代码" aria-label="Permalink to &quot;☆ 运行代码&quot;">​</a></h4><p><img src="'+B+'" alt="image-20210306112159796" loading="lazy"></p><p>运行结果：</p><p><img src="'+_+'" alt="image-20210306112245497" loading="lazy"></p><h4 id="☆-设置或更换python解析器" tabindex="-1">☆ 设置或更换Python解析器 <a class="header-anchor" href="#☆-设置或更换python解析器" aria-label="Permalink to &quot;☆ 设置或更换Python解析器&quot;">​</a></h4><p>打开File文件，找到Settings设置，如下图所示：更换Python解析器</p><p><img src="'+v+'" alt="image-20210306113159846" loading="lazy"></p><h4 id="☆-pycharm软件本身设置" tabindex="-1">☆ PyCharm软件本身设置 <a class="header-anchor" href="#☆-pycharm软件本身设置" aria-label="Permalink to &quot;☆ PyCharm软件本身设置&quot;">​</a></h4><p>① 软件主题（软件未来的样式）</p><p>② 编码字体的设置</p><p>③ 代码字号的设置（文字大小）</p><p>打开File文件 =&gt; Settings设置，找到界面设置：</p><p><img src="'+q+'" alt="image-20210306115108007" loading="lazy"></p><p>主题设置：</p><p><img src="'+f+'" alt="image-20210306115322452" loading="lazy"></p><p>字体与字号设置：</p><p><img src="'+D+'" alt="image-20210306115516870" loading="lazy"></p><p>字体设置：</p><p><img src="'+x+'" alt="image-20210306115611339" loading="lazy"></p><p>字号设置：</p><p><img src="'+A+'" alt="image-20210306115735435" loading="lazy"></p><h4 id="☆-打开项目与关闭项目" tabindex="-1">☆ 打开项目与关闭项目 <a class="header-anchor" href="#☆-打开项目与关闭项目" aria-label="Permalink to &quot;☆ 打开项目与关闭项目&quot;">​</a></h4><p>打开项目：本身项目已经存在了，我们直接打开。</p><p><img src="'+z+'" alt="image-20210306120615122" loading="lazy"></p><p>选择项目目录（文件夹）即可，如下图所示：</p><p><img src="'+w+'" alt="image-20210306120712306" loading="lazy"></p><p>① This Window =&gt; 覆盖当前项⽬，从⽽打开目标项目</p><p>② New Window =&gt; 在新窗⼝打开，则打开两次PyCharm，每个PyCharm负责一个项⽬</p><p>③ Attach =&gt; 把两个项目合并在一起，放在同一个窗口中</p><p>关闭项目：对已经运行项目进行关闭操作。</p><p><img src="'+T+'" alt="image-20210306120425927" loading="lazy"></p><h2 id="四、python注释" tabindex="-1">四、Python注释 <a class="header-anchor" href="#四、python注释" aria-label="Permalink to &quot;四、Python注释&quot;">​</a></h2><h3 id="_1、注释的作用" tabindex="-1">1、注释的作用 <a class="header-anchor" href="#_1、注释的作用" aria-label="Permalink to &quot;1、注释的作用&quot;">​</a></h3><p>首先强调一件事：Python代码 =&gt; Python解析器 =&gt; 机器语言，但是注释经过了Python的解释器并不会解析与执行。因为其主要就是进行代码的注释。</p><p>注释作用：<strong>提高代码的阅读性</strong></p><p><img src="'+S+`" alt="image-20210306143714495" loading="lazy"></p><blockquote><p>在我们编写Python程序时，为了提高程序的可读性，强烈建议大家为核心代码添加注释信息。</p></blockquote><h3 id="_2、python注释的基本语法" tabindex="-1">2、Python注释的基本语法 <a class="header-anchor" href="#_2、python注释的基本语法" aria-label="Permalink to &quot;2、Python注释的基本语法&quot;">​</a></h3><h4 id="☆-单行注释" tabindex="-1">☆ 单行注释 <a class="header-anchor" href="#☆-单行注释" aria-label="Permalink to &quot;☆ 单行注释&quot;">​</a></h4><p>单行注释，以&quot;#&quot;(Shift + 3)号开头，只能注释一行内容</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#注释内容</span></span></code></pre></div><p>示例代码：</p><p>第一种：代码行的上面</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#输出Hello World字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>第二种：放在代码的后面(代码后面保留2个空格)</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出Hello World字符串</span></span></code></pre></div><h4 id="☆-多行注释" tabindex="-1">☆ 多行注释 <a class="header-anchor" href="#☆-多行注释" aria-label="Permalink to &quot;☆ 多行注释&quot;">​</a></h4><p>多行注释：可以同时注释多行代码或程序，常用于代码块的注释</p><p>基本语法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第一行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第二行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第三行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>或</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&#39;&#39;&#39;</span></span>
<span class="line"><span>注释内容</span></span>
<span class="line"><span>第一行</span></span>
<span class="line"><span>第二行</span></span>
<span class="line"><span>第三行</span></span>
<span class="line"><span>&#39;&#39;&#39;</span></span></code></pre></div><p>示例代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Hi, 大家好</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">我是黑马程序员的小伙伴</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">从今天开始，我们将一起学习Python这门语言</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Hi, 大家好</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">我是黑马程序员的小伙伴</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">从今天开始，我们将一起学习Python这门语言</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hi, 大家好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我是黑马程序员的小伙伴&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;从今天开始，我们将一起学习Python这门语言&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="☆-pycharm注释小技巧-快捷键" tabindex="-1">☆ PyCharm注释小技巧（快捷键） <a class="header-anchor" href="#☆-pycharm注释小技巧-快捷键" aria-label="Permalink to &quot;☆ PyCharm注释小技巧（快捷键）&quot;">​</a></h4><p>在PyCharm中，我们可以使用<code>Ctrl + /斜杠</code>来对代码或程序进行快速注释。</p><h2 id="五、pycharm常用快捷键" tabindex="-1">五、PyCharm常用快捷键 <a class="header-anchor" href="#五、pycharm常用快捷键" aria-label="Permalink to &quot;五、PyCharm常用快捷键&quot;">​</a></h2><h3 id="_1、代码提示" tabindex="-1">1、代码提示 <a class="header-anchor" href="#_1、代码提示" aria-label="Permalink to &quot;1、代码提示&quot;">​</a></h3><p>在PyCharm中，当我们输入Python关键字中的前2~3个字符，其会自动进行代码提示。这个时候，我们只需要按回车即可以快速的输入某个内容。</p><p><img src="`+W+'" alt="image-20210306150352389" loading="lazy"></p><h3 id="_2、代码保存" tabindex="-1">2、代码保存 <a class="header-anchor" href="#_2、代码保存" aria-label="Permalink to &quot;2、代码保存&quot;">​</a></h3><p>编写代码时，一定要养成一个好的习惯，使用<code>Ctrl + S</code>快速对代码进行保存操作。</p><p>个人建议，当写完一行代码时，就按一次。</p><h3 id="_3、撤销与恢复" tabindex="-1">3、撤销与恢复 <a class="header-anchor" href="#_3、撤销与恢复" aria-label="Permalink to &quot;3、撤销与恢复&quot;">​</a></h3><p>如果不小心删除了某行代码，这个时候我们可以快速按<code>Ctrl + Z</code>就可以快速进行恢复。每按一次就撤销一次，如果撤销多了，怎么办？</p><p>答：还可以通过<code>Ctrl + Y</code>进行恢复操作</p><h2 id="六、python中的变量-重点" tabindex="-1">六、Python中的变量（重点） <a class="header-anchor" href="#六、python中的变量-重点" aria-label="Permalink to &quot;六、Python中的变量（重点）&quot;">​</a></h2><h3 id="_1、变量的学习目标-案例" tabindex="-1">1、变量的学习目标（案例） <a class="header-anchor" href="#_1、变量的学习目标-案例" aria-label="Permalink to &quot;1、变量的学习目标（案例）&quot;">​</a></h3><p>案例：实现两个变量的交换</p><p><img src="'+U+'" alt="image-20210306152222362" loading="lazy"></p><p>1号杯：可乐</p><p>2号杯：牛奶</p><p>经过一系列Python操作以后</p><p>1号杯：牛奶</p><p>2号杯：可乐</p><h3 id="_2、引入变量的概念" tabindex="-1">2、引入变量的概念 <a class="header-anchor" href="#_2、引入变量的概念" aria-label="Permalink to &quot;2、引入变量的概念&quot;">​</a></h3><p>什么是量：量是程序中的最小单元。</p><p>那什么是变量呢？</p><p><strong>① 变量是存储数据的容器</strong></p><p><strong>② 变量在程序运行过程中是可以发生改变的量</strong></p><p><strong>③ 变量存储的数据是临时的</strong></p><h3 id="_3、变量的作用-举个栗子" tabindex="-1">3、变量的作用（举个栗子） <a class="header-anchor" href="#_3、变量的作用-举个栗子" aria-label="Permalink to &quot;3、变量的作用（举个栗子）&quot;">​</a></h3><p>淘宝注册案例：</p><p>① 写入用户名、密码</p><p><strong>② Python程序要接收用户名和密码（临时存储）</strong></p><p>③ 把刚才接收的用户名和密码永久的存储起来（数据库）</p><p><img src="'+G+`" alt="image-20210306153106909" loading="lazy"></p><p>为了解决以上问题，Python开发了变量这样一个概念，可以把用户输入的一些信息，临时的保存起来，保存的这个容器就是Python变量。</p><h3 id="_4、变量的定义" tabindex="-1">4、变量的定义 <a class="header-anchor" href="#_4、变量的定义" aria-label="Permalink to &quot;4、变量的定义&quot;">​</a></h3><p>基本语法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">变量名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">注：等号的两边都要保留一个空格，其实Python中建议符号的两边尽量都要保留一个空格</span></span></code></pre></div><blockquote><p>说明：在Python程序中，这个等号和日常生活中的等号不太一样，其有一个专业名词：赋值运算符，其读法：要从右向左读，把变量的值通过 = 赋值给左边的变量。</p></blockquote><h3 id="_5、变量的命令规则" tabindex="-1">5、变量的命令规则 <a class="header-anchor" href="#_5、变量的命令规则" aria-label="Permalink to &quot;5、变量的命令规则&quot;">​</a></h3><p>标识符命名规则是Python中定义变量名称时一种命名规范，具体如下：</p><p><strong>① 由数字、字母、下划线(_)组成</strong></p><p><strong>② 不能数字开头</strong></p><p><strong>③ 严格区分⼤小写</strong></p><p><strong>④ 不能使⽤内置关键字作为变量名称</strong></p><p><img src="`+N+`" alt="image-20210306155908564" loading="lazy"></p><blockquote><p>下划线 =&gt; Shift + -减号</p></blockquote><p>举个栗子：</p><p>① abc、abc123、_abc、hello（合理）</p><p>② 123abc、@abc、abc-123（不合理）</p><p>③ _（下划线） =&gt; 请问这可以是一个变量名称么？答：可以</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>④ 变量abc和变量ABC是同一个变量么？答：不一样，这是两个完全不同的变量</p><p>⑤ 记不住33个关键字怎么办？答：借助于help()方法</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keywords&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_6、推荐变量的命名规则" tabindex="-1">6、推荐变量的命名规则 <a class="header-anchor" href="#_6、推荐变量的命名规则" aria-label="Permalink to &quot;6、推荐变量的命名规则&quot;">​</a></h3><p>① 变量命名一定要做到见名知义。</p><p>② 大驼峰：即每个单词首字母都大写，例如： MyName 。</p><p>③ 小驼峰：第二个（含）以后的单词首字母大写，例例如： myName 。</p><p>④ 下划线：例如： my_name 。</p><h3 id="_7、变量的定义与调用" tabindex="-1">7、变量的定义与调用 <a class="header-anchor" href="#_7、变量的定义与调用" aria-label="Permalink to &quot;7、变量的定义与调用&quot;">​</a></h3><p>在Python中，记住：变量一定要先定义，后使用，否则会报错。</p><p>定义：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;itheima&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;北京市顺义区京顺路99号&#39;</span></span></code></pre></div><p>调用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">或</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, address)</span></span></code></pre></div><h3 id="_8、变量的定义与使用常见问题" tabindex="-1">8、变量的定义与使用常见问题 <a class="header-anchor" href="#_8、变量的定义与使用常见问题" aria-label="Permalink to &quot;8、变量的定义与使用常见问题&quot;">​</a></h3><p>① 变量与字符串如何区别：</p><p><strong>在Python中，如果要赋值的内容添加了单引号或者双引号，其就是Python中的一种数据类型：叫做字符串（日常生活中的文本信息）</strong></p><p>② print打印变量时，喜欢为其添加引号</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出变量name对应的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">与</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出&#39;name&#39;这个字符串</span></span></code></pre></div><h2 id="七、python中变量的数据类型" tabindex="-1">七、Python中变量的数据类型 <a class="header-anchor" href="#七、python中变量的数据类型" aria-label="Permalink to &quot;七、Python中变量的数据类型&quot;">​</a></h2><h3 id="_1、为什么要学习数据类型" tabindex="-1">1、为什么要学习数据类型 <a class="header-anchor" href="#_1、为什么要学习数据类型" aria-label="Permalink to &quot;1、为什么要学习数据类型&quot;">​</a></h3><p>变量的定义非常的简单，但是很多小伙伴可能会想：变量除了存储这种字符类型的数据以外，还能存储其他类型的数据么？其实，在 Python中，我们为了应对不同的业务需求，也会把数据分为不同的类型，如下图所示：</p><p><img src="`+K+`" alt="image-20210306162601034" loading="lazy"></p><p>面试题：请手写出Python中的7种数据类型？</p><p>答：数值类型、布尔类型、字符串类型、列表类型、元组类型、集合类型、字典类型</p><p>今天我们只需要了解前3种即可。</p><p>问题：如何判断一个变量到底是什么类型？</p><p>答：① 使用type(变量名称)方法，返回变量的数据类型 ② isinstance(变量名称,数据类型)，只能返回True或False（真的还是假的）</p><h3 id="_2、数值类型" tabindex="-1">2、数值类型 <a class="header-anchor" href="#_2、数值类型" aria-label="Permalink to &quot;2、数值类型&quot;">​</a></h3><p>数值类型就是我们日常生活中的数字，数字又分为两种形式：整数 与 小数（带小数点）</p><p>整数类型：int类型</p><p>小数类型：float类型</p><p>案例1：定义一个人的信息，姓名：Tom、年龄18岁</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Tom&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age))</span></span></code></pre></div><p>案例2：定义一个超市收银系统，写入一个名称：大白菜，价格：3.5</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;大白菜&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(price))</span></span></code></pre></div><h3 id="_3、布尔类型" tabindex="-1">3、布尔类型 <a class="header-anchor" href="#_3、布尔类型" aria-label="Permalink to &quot;3、布尔类型&quot;">​</a></h3><p>布尔类型是与逻辑相关一种数据类型，只有两个值：True（真）与False（假）</p><p>案例1：手工定义一个flag变量，其值为True</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flag)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flag))</span></span></code></pre></div><p>其实在Python中，很多程序的返回结果也可以是True或False，比如isinstance()</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># False</span></span></code></pre></div><h3 id="_4、字符串类型" tabindex="-1">4、字符串类型 <a class="header-anchor" href="#_4、字符串类型" aria-label="Permalink to &quot;4、字符串类型&quot;">​</a></h3><p>在Python变量定义中，如果其赋值的内容是通过单引号或双引号引起来的内容就是字符串str类型。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;这家伙很懒，什么都没有留下...&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg))</span></span></code></pre></div><h3 id="_5、其他类型-了解" tabindex="-1">5、其他类型(了解) <a class="header-anchor" href="#_5、其他类型-了解" aria-label="Permalink to &quot;5、其他类型(了解)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1、list列表类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list1))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#2、tuple元组类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tuple1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tuple1))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3、set集合类型：去重</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set1))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#4、dict字典类型：查询、搜索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;itheima&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dict1))</span></span></code></pre></div><h2 id="八、了解python中的bug" tabindex="-1">八、了解Python中的Bug <a class="header-anchor" href="#八、了解python中的bug" aria-label="Permalink to &quot;八、了解Python中的Bug&quot;">​</a></h2><h3 id="_1、认识一下bug" tabindex="-1">1、认识一下bug <a class="header-anchor" href="#_1、认识一下bug" aria-label="Permalink to &quot;1、认识一下bug&quot;">​</a></h3><p>所谓bug，就是程序中的错误。如果程序有错误，就需要咱们程序员来进行问题排查，及时纠正错误。</p><p><img src="`+Y+'" alt="image-20210306171244287" loading="lazy"></p><h3 id="_2、解决bug三步走" tabindex="-1">2、解决bug三步走 <a class="header-anchor" href="#_2、解决bug三步走" aria-label="Permalink to &quot;2、解决bug三步走&quot;">​</a></h3><p>第一步：查看错误页面</p><p>第二步：看错误的行号</p><p>第三步：根据具体的错误，具体分析</p><h3 id="_3、pycharm代码调试-重点" tabindex="-1">3、PyCharm代码调试（重点） <a class="header-anchor" href="#_3、pycharm代码调试-重点" aria-label="Permalink to &quot;3、PyCharm代码调试（重点）&quot;">​</a></h3><p>Debug工具是PyCharm IDE中集成的专门用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程，以方便我们快速找出程序的Bug！</p><p>Debug工具使⽤二步走：<strong>① 打断点 ② Debug调试</strong></p><h3 id="_4、下断点" tabindex="-1">4、下断点 <a class="header-anchor" href="#_4、下断点" aria-label="Permalink to &quot;4、下断点&quot;">​</a></h3><p>断点应该放在哪个位置：答：代码可能出错的代码段的第一行</p><p><img src="'+H+'" alt="image-20210306171719774" loading="lazy"></p><h3 id="_5、debug调试" tabindex="-1">5、Debug调试 <a class="header-anchor" href="#_5、debug调试" aria-label="Permalink to &quot;5、Debug调试&quot;">​</a></h3><p><img src="'+I+'" alt="image-20210306171833494" loading="lazy"></p><h3 id="_6、单步调试" tabindex="-1">6、单步调试 <a class="header-anchor" href="#_6、单步调试" aria-label="Permalink to &quot;6、单步调试&quot;">​</a></h3><p><img src="'+J+'" alt="image-20210306172007078" loading="lazy"></p><p>遇到小闪电图标就代表这一行，可能出错了。</p><p><img src="'+Z+`" alt="image-20210306172338345" loading="lazy"></p><h2 id="九、python中的格式化输出" tabindex="-1">九、Python中的格式化输出 <a class="header-anchor" href="#九、python中的格式化输出" aria-label="Permalink to &quot;九、Python中的格式化输出&quot;">​</a></h2><h3 id="_1、格式化输出" tabindex="-1">1、格式化输出 <a class="header-anchor" href="#_1、格式化输出" aria-label="Permalink to &quot;1、格式化输出&quot;">​</a></h3><p>目前为止，我们所有的输出都是直接通过print(变量名称)形式直接打印的。但是实际工作中，我们可能需要对变量的输出进行格式化操作（按照一定格式进行输出）。</p><h3 id="_2、百分号格式化输出" tabindex="-1">2、百分号格式化输出 <a class="header-anchor" href="#_2、百分号格式化输出" aria-label="Permalink to &quot;2、百分号格式化输出&quot;">​</a></h3><p>基本语法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(变量名称)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字符串%格式&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (变量名称))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字符串%格式 %格式 %格式&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (变量名称1, 变量名称2, 变量名称3))</span></span></code></pre></div><p>%格式常见形式如下：</p><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td><strong>%s</strong></td><td>字符串</td></tr><tr><td><strong>%d</strong></td><td>有符号的十进制整数</td></tr><tr><td><strong>%f</strong></td><td>浮点数</td></tr><tr><td>%c</td><td>字符</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写ox）</td></tr><tr><td>%X</td><td>十六进制整数（大写OX）</td></tr><tr><td>%e</td><td>科学计数法（小写&#39;e&#39;）</td></tr><tr><td>%E</td><td>科学计数法（大写&#39;E&#39;）</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f和%E的简写</td></tr></tbody></table><p>案例：定义两个变量name=&#39;itheima&#39;, age=18，按照如下格式进行输出：我的名字是itheima，今年18岁了。</p><p><img src="`+j+`" alt="image-20210306175326815" loading="lazy"></p><p>案例：定义两个变量title=&#39;大白菜&#39;，price=3.5，按照如下格式进行输出：今天蔬菜特价了，大白菜只要3.5元/斤。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;大白菜&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#格式化输出“今天蔬菜特价了，大白菜只要3.5元/斤。&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;今天蔬菜特价了，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">只要</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">元/斤。&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (title, price))</span></span></code></pre></div><p>其实除了%f可以设置小数点位数以外，%d也可以填充序号。</p><p>案例：定义两个变量id=1，name=&#39;itheima&#39;，按照如下格式进行输出：姓名itheima，学号000001</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;itheima&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，学号</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%06d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="_3、format方法格式化输出" tabindex="-1">3、format方法格式化输出 <a class="header-anchor" href="#_3、format方法格式化输出" aria-label="Permalink to &quot;3、format方法格式化输出&quot;">​</a></h3><p>基本语法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;字符串</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(变量名称1))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">字符串</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(变量名称1, 变量名称2))</span></span></code></pre></div><p>案例：定义两个变量，name=&#39;孙悟空&#39;，mobile=&#39;18878569090&#39;，按照以下格式进行输出&quot;姓名：孙悟空，联系方式：18878569090&quot;</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;孙悟空&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mobile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;18878569090&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，联系方式：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(name, mobile))</span></span></code></pre></div><h3 id="_4、format方法简写形式格式化输出-推荐" tabindex="-1">4、format方法简写形式格式化输出（推荐） <a class="header-anchor" href="#_4、format方法简写形式格式化输出-推荐" aria-label="Permalink to &quot;4、format方法简写形式格式化输出（推荐）&quot;">​</a></h3><p>在Python3.6以后版本，为了简化format输出操作，引入了一个简写形式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;孙悟空&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mobile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;18878569090&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 518.25958947</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#:.2f表示 将浮点数格式化为保留两位小数的形式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;姓名：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，联系方式：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mobile</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，年龄：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.2f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_5、格式化输出中的转义符号" tabindex="-1">5、格式化输出中的转义符号 <a class="header-anchor" href="#_5、格式化输出中的转义符号" aria-label="Permalink to &quot;5、格式化输出中的转义符号&quot;">​</a></h3><p>在字符串中，如果出现了\\t和\\n，其代表的含义就是两个转义字符</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">t ：制表符，一个tab键（4个空格）的距离</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">n ：换行符</span></span></code></pre></div><p>案例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>特别说明：<strong>默认情况下，每个print()方法执行完毕后，都会输出一个\\n换行符。如果不想让print()方法换行，可以添加一个end参数</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="十、python中的标准输入" tabindex="-1">十、Python中的标准输入 <a class="header-anchor" href="#十、python中的标准输入" aria-label="Permalink to &quot;十、Python中的标准输入&quot;">​</a></h2><h3 id="_1、为什么需要输入" tabindex="-1">1、为什么需要输入 <a class="header-anchor" href="#_1、为什么需要输入" aria-label="Permalink to &quot;1、为什么需要输入&quot;">​</a></h3><p>到目前为止，我们所有的程序都只能把数据输出给用户。但是实际工作中，我们经常输入获取用户的输入信息，如银行系统中的密码输入、淘宝中的用户登录验证。</p><p><img src="`+V+`" alt="image-20210306182224429" loading="lazy"></p><h3 id="_2、input-输入方法" tabindex="-1">2、input()输入方法 <a class="header-anchor" href="#_2、input-输入方法" aria-label="Permalink to &quot;2、input()输入方法&quot;">​</a></h3><p>在Python中，如果想让Python程序接受用户的输入信息，可以使用input()方法</p><p>基本语法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>但是往往只有input()方法，其意义不大，我们还应该使用一个变量来临时接受用户的输入，已方便后期的操作。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">变量名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;提示信息：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>案例：银行系统中的，输入密码的过程</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的银行卡密码：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;您输入的银行卡密码为：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3、input-方法重要事项" tabindex="-1">3、input()方法重要事项 <a class="header-anchor" href="#_3、input-方法重要事项" aria-label="Permalink to &quot;3、input()方法重要事项&quot;">​</a></h3><p>记住：所有由input()方法获取的数据都是**“字符串”**类型</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的姓名：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的年龄：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;class &#39;str&#39;&gt;</span></span></code></pre></div>`,336),M=[X];function O(R,Q,$,ss,is,as){return a(),i("div",null,M)}const ps=s(L,[["render",O]]);export{ns as __pageData,ps as default};
